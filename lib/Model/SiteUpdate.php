<?php
/**
 * SiteUpdate
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Duda
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.0.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * SiteUpdate Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class SiteUpdate implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'SiteUpdate';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'external_uid' => 'string',
        'default_domain_prefix' => 'string',
        'lang' => 'string',
        'fav_icon' => 'string',
        'force_https' => 'bool',
        'site_alternate_domains' => '\OpenAPI\Client\Model\AlternateDomains',
        'site_seo' => '\OpenAPI\Client\Model\Seo',
        'schemas' => '\OpenAPI\Client\Model\SiteSchemas'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'external_uid' => null,
        'default_domain_prefix' => null,
        'lang' => null,
        'fav_icon' => null,
        'force_https' => null,
        'site_alternate_domains' => null,
        'site_seo' => null,
        'schemas' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'external_uid' => 'external_uid',
        'default_domain_prefix' => 'default_domain_prefix',
        'lang' => 'lang',
        'fav_icon' => 'fav_icon',
        'force_https' => 'force_https',
        'site_alternate_domains' => 'site_alternate_domains',
        'site_seo' => 'site_seo',
        'schemas' => 'schemas'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'external_uid' => 'setExternalUid',
        'default_domain_prefix' => 'setDefaultDomainPrefix',
        'lang' => 'setLang',
        'fav_icon' => 'setFavIcon',
        'force_https' => 'setForceHttps',
        'site_alternate_domains' => 'setSiteAlternateDomains',
        'site_seo' => 'setSiteSeo',
        'schemas' => 'setSchemas'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'external_uid' => 'getExternalUid',
        'default_domain_prefix' => 'getDefaultDomainPrefix',
        'lang' => 'getLang',
        'fav_icon' => 'getFavIcon',
        'force_https' => 'getForceHttps',
        'site_alternate_domains' => 'getSiteAlternateDomains',
        'site_seo' => 'getSiteSeo',
        'schemas' => 'getSchemas'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['external_uid'] = $data['external_uid'] ?? null;
        $this->container['default_domain_prefix'] = $data['default_domain_prefix'] ?? null;
        $this->container['lang'] = $data['lang'] ?? null;
        $this->container['fav_icon'] = $data['fav_icon'] ?? null;
        $this->container['force_https'] = $data['force_https'] ?? null;
        $this->container['site_alternate_domains'] = $data['site_alternate_domains'] ?? null;
        $this->container['site_seo'] = $data['site_seo'] ?? null;
        $this->container['schemas'] = $data['schemas'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets external_uid
     *
     * @return string|null
     */
    public function getExternalUid()
    {
        return $this->container['external_uid'];
    }

    /**
     * Sets external_uid
     *
     * @param string|null $external_uid external_uid
     *
     * @return self
     */
    public function setExternalUid($external_uid)
    {
        $this->container['external_uid'] = $external_uid;

        return $this;
    }

    /**
     * Gets default_domain_prefix
     *
     * @return string|null
     */
    public function getDefaultDomainPrefix()
    {
        return $this->container['default_domain_prefix'];
    }

    /**
     * Sets default_domain_prefix
     *
     * @param string|null $default_domain_prefix default_domain_prefix
     *
     * @return self
     */
    public function setDefaultDomainPrefix($default_domain_prefix)
    {
        $this->container['default_domain_prefix'] = $default_domain_prefix;

        return $this;
    }

    /**
     * Gets lang
     *
     * @return string|null
     */
    public function getLang()
    {
        return $this->container['lang'];
    }

    /**
     * Sets lang
     *
     * @param string|null $lang lang
     *
     * @return self
     */
    public function setLang($lang)
    {
        $this->container['lang'] = $lang;

        return $this;
    }

    /**
     * Gets fav_icon
     *
     * @return string|null
     */
    public function getFavIcon()
    {
        return $this->container['fav_icon'];
    }

    /**
     * Sets fav_icon
     *
     * @param string|null $fav_icon fav_icon
     *
     * @return self
     */
    public function setFavIcon($fav_icon)
    {
        $this->container['fav_icon'] = $fav_icon;

        return $this;
    }

    /**
     * Gets force_https
     *
     * @return bool|null
     */
    public function getForceHttps()
    {
        return $this->container['force_https'];
    }

    /**
     * Sets force_https
     *
     * @param bool|null $force_https force_https
     *
     * @return self
     */
    public function setForceHttps($force_https)
    {
        $this->container['force_https'] = $force_https;

        return $this;
    }

    /**
     * Gets site_alternate_domains
     *
     * @return \OpenAPI\Client\Model\AlternateDomains|null
     */
    public function getSiteAlternateDomains()
    {
        return $this->container['site_alternate_domains'];
    }

    /**
     * Sets site_alternate_domains
     *
     * @param \OpenAPI\Client\Model\AlternateDomains|null $site_alternate_domains site_alternate_domains
     *
     * @return self
     */
    public function setSiteAlternateDomains($site_alternate_domains)
    {
        $this->container['site_alternate_domains'] = $site_alternate_domains;

        return $this;
    }

    /**
     * Gets site_seo
     *
     * @return \OpenAPI\Client\Model\Seo|null
     */
    public function getSiteSeo()
    {
        return $this->container['site_seo'];
    }

    /**
     * Sets site_seo
     *
     * @param \OpenAPI\Client\Model\Seo|null $site_seo site_seo
     *
     * @return self
     */
    public function setSiteSeo($site_seo)
    {
        $this->container['site_seo'] = $site_seo;

        return $this;
    }

    /**
     * Gets schemas
     *
     * @return \OpenAPI\Client\Model\SiteSchemas|null
     */
    public function getSchemas()
    {
        return $this->container['schemas'];
    }

    /**
     * Sets schemas
     *
     * @param \OpenAPI\Client\Model\SiteSchemas|null $schemas schemas
     *
     * @return self
     */
    public function setSchemas($schemas)
    {
        $this->container['schemas'] = $schemas;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


