<?php
/**
 * LocationSocialAccounts
 *
 * PHP version 7.3
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Duda
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.4.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * LocationSocialAccounts Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class LocationSocialAccounts implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Location_social_accounts';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'tripadvisor' => 'string',
        'youtube' => 'string',
        'facebook' => 'string',
        'yelp' => 'string',
        'pinterest' => 'string',
        'google_plus' => 'string',
        'linkedin' => 'string',
        'instagram' => 'string',
        'snapchat' => 'string',
        'twitter' => 'string',
        'rss' => 'string',
        'vimeo' => 'string',
        'reddit' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'tripadvisor' => null,
        'youtube' => null,
        'facebook' => null,
        'yelp' => null,
        'pinterest' => null,
        'google_plus' => null,
        'linkedin' => null,
        'instagram' => null,
        'snapchat' => null,
        'twitter' => null,
        'rss' => null,
        'vimeo' => null,
        'reddit' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'tripadvisor' => 'tripadvisor',
        'youtube' => 'youtube',
        'facebook' => 'facebook',
        'yelp' => 'yelp',
        'pinterest' => 'pinterest',
        'google_plus' => 'google_plus',
        'linkedin' => 'linkedin',
        'instagram' => 'instagram',
        'snapchat' => 'snapchat',
        'twitter' => 'twitter',
        'rss' => 'rss',
        'vimeo' => 'vimeo',
        'reddit' => 'reddit'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'tripadvisor' => 'setTripadvisor',
        'youtube' => 'setYoutube',
        'facebook' => 'setFacebook',
        'yelp' => 'setYelp',
        'pinterest' => 'setPinterest',
        'google_plus' => 'setGooglePlus',
        'linkedin' => 'setLinkedin',
        'instagram' => 'setInstagram',
        'snapchat' => 'setSnapchat',
        'twitter' => 'setTwitter',
        'rss' => 'setRss',
        'vimeo' => 'setVimeo',
        'reddit' => 'setReddit'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'tripadvisor' => 'getTripadvisor',
        'youtube' => 'getYoutube',
        'facebook' => 'getFacebook',
        'yelp' => 'getYelp',
        'pinterest' => 'getPinterest',
        'google_plus' => 'getGooglePlus',
        'linkedin' => 'getLinkedin',
        'instagram' => 'getInstagram',
        'snapchat' => 'getSnapchat',
        'twitter' => 'getTwitter',
        'rss' => 'getRss',
        'vimeo' => 'getVimeo',
        'reddit' => 'getReddit'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['tripadvisor'] = $data['tripadvisor'] ?? null;
        $this->container['youtube'] = $data['youtube'] ?? null;
        $this->container['facebook'] = $data['facebook'] ?? null;
        $this->container['yelp'] = $data['yelp'] ?? null;
        $this->container['pinterest'] = $data['pinterest'] ?? null;
        $this->container['google_plus'] = $data['google_plus'] ?? null;
        $this->container['linkedin'] = $data['linkedin'] ?? null;
        $this->container['instagram'] = $data['instagram'] ?? null;
        $this->container['snapchat'] = $data['snapchat'] ?? null;
        $this->container['twitter'] = $data['twitter'] ?? null;
        $this->container['rss'] = $data['rss'] ?? null;
        $this->container['vimeo'] = $data['vimeo'] ?? null;
        $this->container['reddit'] = $data['reddit'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets tripadvisor
     *
     * @return string|null
     */
    public function getTripadvisor()
    {
        return $this->container['tripadvisor'];
    }

    /**
     * Sets tripadvisor
     *
     * @param string|null $tripadvisor tripadvisor
     *
     * @return self
     */
    public function setTripadvisor($tripadvisor)
    {
        $this->container['tripadvisor'] = $tripadvisor;

        return $this;
    }

    /**
     * Gets youtube
     *
     * @return string|null
     */
    public function getYoutube()
    {
        return $this->container['youtube'];
    }

    /**
     * Sets youtube
     *
     * @param string|null $youtube youtube
     *
     * @return self
     */
    public function setYoutube($youtube)
    {
        $this->container['youtube'] = $youtube;

        return $this;
    }

    /**
     * Gets facebook
     *
     * @return string|null
     */
    public function getFacebook()
    {
        return $this->container['facebook'];
    }

    /**
     * Sets facebook
     *
     * @param string|null $facebook facebook
     *
     * @return self
     */
    public function setFacebook($facebook)
    {
        $this->container['facebook'] = $facebook;

        return $this;
    }

    /**
     * Gets yelp
     *
     * @return string|null
     */
    public function getYelp()
    {
        return $this->container['yelp'];
    }

    /**
     * Sets yelp
     *
     * @param string|null $yelp yelp
     *
     * @return self
     */
    public function setYelp($yelp)
    {
        $this->container['yelp'] = $yelp;

        return $this;
    }

    /**
     * Gets pinterest
     *
     * @return string|null
     */
    public function getPinterest()
    {
        return $this->container['pinterest'];
    }

    /**
     * Sets pinterest
     *
     * @param string|null $pinterest pinterest
     *
     * @return self
     */
    public function setPinterest($pinterest)
    {
        $this->container['pinterest'] = $pinterest;

        return $this;
    }

    /**
     * Gets google_plus
     *
     * @return string|null
     */
    public function getGooglePlus()
    {
        return $this->container['google_plus'];
    }

    /**
     * Sets google_plus
     *
     * @param string|null $google_plus google_plus
     *
     * @return self
     */
    public function setGooglePlus($google_plus)
    {
        $this->container['google_plus'] = $google_plus;

        return $this;
    }

    /**
     * Gets linkedin
     *
     * @return string|null
     */
    public function getLinkedin()
    {
        return $this->container['linkedin'];
    }

    /**
     * Sets linkedin
     *
     * @param string|null $linkedin linkedin
     *
     * @return self
     */
    public function setLinkedin($linkedin)
    {
        $this->container['linkedin'] = $linkedin;

        return $this;
    }

    /**
     * Gets instagram
     *
     * @return string|null
     */
    public function getInstagram()
    {
        return $this->container['instagram'];
    }

    /**
     * Sets instagram
     *
     * @param string|null $instagram instagram
     *
     * @return self
     */
    public function setInstagram($instagram)
    {
        $this->container['instagram'] = $instagram;

        return $this;
    }

    /**
     * Gets snapchat
     *
     * @return string|null
     */
    public function getSnapchat()
    {
        return $this->container['snapchat'];
    }

    /**
     * Sets snapchat
     *
     * @param string|null $snapchat snapchat
     *
     * @return self
     */
    public function setSnapchat($snapchat)
    {
        $this->container['snapchat'] = $snapchat;

        return $this;
    }

    /**
     * Gets twitter
     *
     * @return string|null
     */
    public function getTwitter()
    {
        return $this->container['twitter'];
    }

    /**
     * Sets twitter
     *
     * @param string|null $twitter twitter
     *
     * @return self
     */
    public function setTwitter($twitter)
    {
        $this->container['twitter'] = $twitter;

        return $this;
    }

    /**
     * Gets rss
     *
     * @return string|null
     */
    public function getRss()
    {
        return $this->container['rss'];
    }

    /**
     * Sets rss
     *
     * @param string|null $rss rss
     *
     * @return self
     */
    public function setRss($rss)
    {
        $this->container['rss'] = $rss;

        return $this;
    }

    /**
     * Gets vimeo
     *
     * @return string|null
     */
    public function getVimeo()
    {
        return $this->container['vimeo'];
    }

    /**
     * Sets vimeo
     *
     * @param string|null $vimeo vimeo
     *
     * @return self
     */
    public function setVimeo($vimeo)
    {
        $this->container['vimeo'] = $vimeo;

        return $this;
    }

    /**
     * Gets reddit
     *
     * @return string|null
     */
    public function getReddit()
    {
        return $this->container['reddit'];
    }

    /**
     * Sets reddit
     *
     * @param string|null $reddit reddit
     *
     * @return self
     */
    public function setReddit($reddit)
    {
        $this->container['reddit'] = $reddit;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


