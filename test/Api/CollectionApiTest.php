<?php
/**
 * CollectionApiTest
 * PHP version 7.3
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Duda
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.4.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Please update the test case below to test the endpoint.
 */

namespace OpenAPI\Client\Test\Api;

use \OpenAPI\Client\Configuration;
use \OpenAPI\Client\ApiException;
use \OpenAPI\Client\ObjectSerializer;
use PHPUnit\Framework\TestCase;

/**
 * CollectionApiTest Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class CollectionApiTest extends TestCase
{

    /**
     * Setup before running any test cases
     */
    public static function setUpBeforeClass(): void
    {
    }

    /**
     * Setup before running each test case
     */
    public function setUp(): void
    {
    }

    /**
     * Clean up after running each test case
     */
    public function tearDown(): void
    {
    }

    /**
     * Clean up after running all test cases
     */
    public static function tearDownAfterClass(): void
    {
    }

    /**
     * Test case for sitesMultiscreenCollectionsRevalidateExternalIdPost
     *
     * Revalidate all collections in all sites under the same account that use the provided external id.
     *
     */
    public function testSitesMultiscreenCollectionsRevalidateExternalIdPost()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for sitesMultiscreenSiteNameCollectionCollectionNameDelete
     *
     * Get the fields and data of an existing collection.
     *
     */
    public function testSitesMultiscreenSiteNameCollectionCollectionNameDelete()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for sitesMultiscreenSiteNameCollectionCollectionNameFieldFieldNameDelete
     *
     * Delete an existing field of a collection.
     *
     */
    public function testSitesMultiscreenSiteNameCollectionCollectionNameFieldFieldNameDelete()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for sitesMultiscreenSiteNameCollectionCollectionNameFieldFieldNamePut
     *
     * Update existing field of a collection.
     *
     */
    public function testSitesMultiscreenSiteNameCollectionCollectionNameFieldFieldNamePut()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for sitesMultiscreenSiteNameCollectionCollectionNameFieldPost
     *
     * Add a new field(s) to an existing collection..
     *
     */
    public function testSitesMultiscreenSiteNameCollectionCollectionNameFieldPost()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for sitesMultiscreenSiteNameCollectionCollectionNameGet
     *
     * Get the fields and data of an existing collection.
     *
     */
    public function testSitesMultiscreenSiteNameCollectionCollectionNameGet()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for sitesMultiscreenSiteNameCollectionCollectionNamePut
     *
     * Update an existing collection.
     *
     */
    public function testSitesMultiscreenSiteNameCollectionCollectionNamePut()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for sitesMultiscreenSiteNameCollectionCollectionNameRevalidatePost
     *
     * Force Duda to refresh the data from an external URL for a given collection..
     *
     */
    public function testSitesMultiscreenSiteNameCollectionCollectionNameRevalidatePost()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for sitesMultiscreenSiteNameCollectionCollectionNameRowDelete
     *
     * Delete existing rows of data that exist within the collection..
     *
     */
    public function testSitesMultiscreenSiteNameCollectionCollectionNameRowDelete()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for sitesMultiscreenSiteNameCollectionCollectionNameRowPost
     *
     * Add new row(s) of data into an existing collection. This accepts multiple row values if you'd like to insert more than one..
     *
     */
    public function testSitesMultiscreenSiteNameCollectionCollectionNameRowPost()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for sitesMultiscreenSiteNameCollectionCollectionNameRowPut
     *
     * Update existing collection rows..
     *
     */
    public function testSitesMultiscreenSiteNameCollectionCollectionNameRowPut()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for sitesMultiscreenSiteNameCollectionGet
     *
     * Get all collections that exist on this website..
     *
     */
    public function testSitesMultiscreenSiteNameCollectionGet()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for sitesMultiscreenSiteNameCollectionPost
     *
     * Create a new collection within a site.
     *
     */
    public function testSitesMultiscreenSiteNameCollectionPost()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }
}
