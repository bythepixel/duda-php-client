<?php
/**
 * CollectionApi
 * PHP version 7.3
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Duda
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.4.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use OpenAPI\Client\ApiException;
use OpenAPI\Client\Configuration;
use OpenAPI\Client\HeaderSelector;
use OpenAPI\Client\ObjectSerializer;

/**
 * CollectionApi Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class CollectionApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation sitesMultiscreenCollectionsRevalidateExternalIdPost
     *
     * Revalidate all collections in all sites under the same account that use the provided external id
     *
     * @param  string $external_id The external ID for the collections (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\Collection|\OpenAPI\Client\Model\Error
     */
    public function sitesMultiscreenCollectionsRevalidateExternalIdPost($external_id)
    {
        list($response) = $this->sitesMultiscreenCollectionsRevalidateExternalIdPostWithHttpInfo($external_id);
        return $response;
    }

    /**
     * Operation sitesMultiscreenCollectionsRevalidateExternalIdPostWithHttpInfo
     *
     * Revalidate all collections in all sites under the same account that use the provided external id
     *
     * @param  string $external_id The external ID for the collections (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\Collection|\OpenAPI\Client\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function sitesMultiscreenCollectionsRevalidateExternalIdPostWithHttpInfo($external_id)
    {
        $request = $this->sitesMultiscreenCollectionsRevalidateExternalIdPostRequest($external_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\Collection' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\Collection', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                default:
                    if ('\OpenAPI\Client\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\Collection';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\Collection',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sitesMultiscreenCollectionsRevalidateExternalIdPostAsync
     *
     * Revalidate all collections in all sites under the same account that use the provided external id
     *
     * @param  string $external_id The external ID for the collections (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sitesMultiscreenCollectionsRevalidateExternalIdPostAsync($external_id)
    {
        return $this->sitesMultiscreenCollectionsRevalidateExternalIdPostAsyncWithHttpInfo($external_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sitesMultiscreenCollectionsRevalidateExternalIdPostAsyncWithHttpInfo
     *
     * Revalidate all collections in all sites under the same account that use the provided external id
     *
     * @param  string $external_id The external ID for the collections (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sitesMultiscreenCollectionsRevalidateExternalIdPostAsyncWithHttpInfo($external_id)
    {
        $returnType = '\OpenAPI\Client\Model\Collection';
        $request = $this->sitesMultiscreenCollectionsRevalidateExternalIdPostRequest($external_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sitesMultiscreenCollectionsRevalidateExternalIdPost'
     *
     * @param  string $external_id The external ID for the collections (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function sitesMultiscreenCollectionsRevalidateExternalIdPostRequest($external_id)
    {
        // verify the required parameter 'external_id' is set
        if ($external_id === null || (is_array($external_id) && count($external_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $external_id when calling sitesMultiscreenCollectionsRevalidateExternalIdPost'
            );
        }

        $resourcePath = '/sites/multiscreen/collections/revalidate/{external_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($external_id !== null) {
            $resourcePath = str_replace(
                '{' . 'external_id' . '}',
                ObjectSerializer::toPathValue($external_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sitesMultiscreenSiteNameCollectionCollectionNameDelete
     *
     * Get the fields and data of an existing collection
     *
     * @param  string $site_name Site name (required)
     * @param  string $collection_name Collection name (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function sitesMultiscreenSiteNameCollectionCollectionNameDelete($site_name, $collection_name)
    {
        $this->sitesMultiscreenSiteNameCollectionCollectionNameDeleteWithHttpInfo($site_name, $collection_name);
    }

    /**
     * Operation sitesMultiscreenSiteNameCollectionCollectionNameDeleteWithHttpInfo
     *
     * Get the fields and data of an existing collection
     *
     * @param  string $site_name Site name (required)
     * @param  string $collection_name Collection name (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function sitesMultiscreenSiteNameCollectionCollectionNameDeleteWithHttpInfo($site_name, $collection_name)
    {
        $request = $this->sitesMultiscreenSiteNameCollectionCollectionNameDeleteRequest($site_name, $collection_name);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sitesMultiscreenSiteNameCollectionCollectionNameDeleteAsync
     *
     * Get the fields and data of an existing collection
     *
     * @param  string $site_name Site name (required)
     * @param  string $collection_name Collection name (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sitesMultiscreenSiteNameCollectionCollectionNameDeleteAsync($site_name, $collection_name)
    {
        return $this->sitesMultiscreenSiteNameCollectionCollectionNameDeleteAsyncWithHttpInfo($site_name, $collection_name)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sitesMultiscreenSiteNameCollectionCollectionNameDeleteAsyncWithHttpInfo
     *
     * Get the fields and data of an existing collection
     *
     * @param  string $site_name Site name (required)
     * @param  string $collection_name Collection name (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sitesMultiscreenSiteNameCollectionCollectionNameDeleteAsyncWithHttpInfo($site_name, $collection_name)
    {
        $returnType = '';
        $request = $this->sitesMultiscreenSiteNameCollectionCollectionNameDeleteRequest($site_name, $collection_name);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sitesMultiscreenSiteNameCollectionCollectionNameDelete'
     *
     * @param  string $site_name Site name (required)
     * @param  string $collection_name Collection name (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function sitesMultiscreenSiteNameCollectionCollectionNameDeleteRequest($site_name, $collection_name)
    {
        // verify the required parameter 'site_name' is set
        if ($site_name === null || (is_array($site_name) && count($site_name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $site_name when calling sitesMultiscreenSiteNameCollectionCollectionNameDelete'
            );
        }
        // verify the required parameter 'collection_name' is set
        if ($collection_name === null || (is_array($collection_name) && count($collection_name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $collection_name when calling sitesMultiscreenSiteNameCollectionCollectionNameDelete'
            );
        }

        $resourcePath = '/sites/multiscreen/{site_name}/collection/{collection_name}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($site_name !== null) {
            $resourcePath = str_replace(
                '{' . 'site_name' . '}',
                ObjectSerializer::toPathValue($site_name),
                $resourcePath
            );
        }
        // path params
        if ($collection_name !== null) {
            $resourcePath = str_replace(
                '{' . 'collection_name' . '}',
                ObjectSerializer::toPathValue($collection_name),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sitesMultiscreenSiteNameCollectionCollectionNameFieldFieldNameDelete
     *
     * Delete an existing field of a collection
     *
     * @param  string $site_name Site name (required)
     * @param  string $collection_name Collection name (required)
     * @param  string $field_name Name of the field in the collection. (must not start with $) (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function sitesMultiscreenSiteNameCollectionCollectionNameFieldFieldNameDelete($site_name, $collection_name, $field_name)
    {
        $this->sitesMultiscreenSiteNameCollectionCollectionNameFieldFieldNameDeleteWithHttpInfo($site_name, $collection_name, $field_name);
    }

    /**
     * Operation sitesMultiscreenSiteNameCollectionCollectionNameFieldFieldNameDeleteWithHttpInfo
     *
     * Delete an existing field of a collection
     *
     * @param  string $site_name Site name (required)
     * @param  string $collection_name Collection name (required)
     * @param  string $field_name Name of the field in the collection. (must not start with $) (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function sitesMultiscreenSiteNameCollectionCollectionNameFieldFieldNameDeleteWithHttpInfo($site_name, $collection_name, $field_name)
    {
        $request = $this->sitesMultiscreenSiteNameCollectionCollectionNameFieldFieldNameDeleteRequest($site_name, $collection_name, $field_name);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sitesMultiscreenSiteNameCollectionCollectionNameFieldFieldNameDeleteAsync
     *
     * Delete an existing field of a collection
     *
     * @param  string $site_name Site name (required)
     * @param  string $collection_name Collection name (required)
     * @param  string $field_name Name of the field in the collection. (must not start with $) (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sitesMultiscreenSiteNameCollectionCollectionNameFieldFieldNameDeleteAsync($site_name, $collection_name, $field_name)
    {
        return $this->sitesMultiscreenSiteNameCollectionCollectionNameFieldFieldNameDeleteAsyncWithHttpInfo($site_name, $collection_name, $field_name)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sitesMultiscreenSiteNameCollectionCollectionNameFieldFieldNameDeleteAsyncWithHttpInfo
     *
     * Delete an existing field of a collection
     *
     * @param  string $site_name Site name (required)
     * @param  string $collection_name Collection name (required)
     * @param  string $field_name Name of the field in the collection. (must not start with $) (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sitesMultiscreenSiteNameCollectionCollectionNameFieldFieldNameDeleteAsyncWithHttpInfo($site_name, $collection_name, $field_name)
    {
        $returnType = '';
        $request = $this->sitesMultiscreenSiteNameCollectionCollectionNameFieldFieldNameDeleteRequest($site_name, $collection_name, $field_name);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sitesMultiscreenSiteNameCollectionCollectionNameFieldFieldNameDelete'
     *
     * @param  string $site_name Site name (required)
     * @param  string $collection_name Collection name (required)
     * @param  string $field_name Name of the field in the collection. (must not start with $) (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function sitesMultiscreenSiteNameCollectionCollectionNameFieldFieldNameDeleteRequest($site_name, $collection_name, $field_name)
    {
        // verify the required parameter 'site_name' is set
        if ($site_name === null || (is_array($site_name) && count($site_name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $site_name when calling sitesMultiscreenSiteNameCollectionCollectionNameFieldFieldNameDelete'
            );
        }
        // verify the required parameter 'collection_name' is set
        if ($collection_name === null || (is_array($collection_name) && count($collection_name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $collection_name when calling sitesMultiscreenSiteNameCollectionCollectionNameFieldFieldNameDelete'
            );
        }
        // verify the required parameter 'field_name' is set
        if ($field_name === null || (is_array($field_name) && count($field_name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $field_name when calling sitesMultiscreenSiteNameCollectionCollectionNameFieldFieldNameDelete'
            );
        }

        $resourcePath = '/sites/multiscreen/{site_name}/collection/{collection_name}/field/{field_name}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($site_name !== null) {
            $resourcePath = str_replace(
                '{' . 'site_name' . '}',
                ObjectSerializer::toPathValue($site_name),
                $resourcePath
            );
        }
        // path params
        if ($collection_name !== null) {
            $resourcePath = str_replace(
                '{' . 'collection_name' . '}',
                ObjectSerializer::toPathValue($collection_name),
                $resourcePath
            );
        }
        // path params
        if ($field_name !== null) {
            $resourcePath = str_replace(
                '{' . 'field_name' . '}',
                ObjectSerializer::toPathValue($field_name),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sitesMultiscreenSiteNameCollectionCollectionNameFieldFieldNamePut
     *
     * Update existing field of a collection
     *
     * @param  string $site_name Site name (required)
     * @param  string $collection_name Collection name (required)
     * @param  string $field_name Name of the field in the collection. (must not start with $) (required)
     * @param  \OpenAPI\Client\Model\InlineObject14 $inline_object14 inline_object14 (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function sitesMultiscreenSiteNameCollectionCollectionNameFieldFieldNamePut($site_name, $collection_name, $field_name, $inline_object14 = null)
    {
        $this->sitesMultiscreenSiteNameCollectionCollectionNameFieldFieldNamePutWithHttpInfo($site_name, $collection_name, $field_name, $inline_object14);
    }

    /**
     * Operation sitesMultiscreenSiteNameCollectionCollectionNameFieldFieldNamePutWithHttpInfo
     *
     * Update existing field of a collection
     *
     * @param  string $site_name Site name (required)
     * @param  string $collection_name Collection name (required)
     * @param  string $field_name Name of the field in the collection. (must not start with $) (required)
     * @param  \OpenAPI\Client\Model\InlineObject14 $inline_object14 (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function sitesMultiscreenSiteNameCollectionCollectionNameFieldFieldNamePutWithHttpInfo($site_name, $collection_name, $field_name, $inline_object14 = null)
    {
        $request = $this->sitesMultiscreenSiteNameCollectionCollectionNameFieldFieldNamePutRequest($site_name, $collection_name, $field_name, $inline_object14);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sitesMultiscreenSiteNameCollectionCollectionNameFieldFieldNamePutAsync
     *
     * Update existing field of a collection
     *
     * @param  string $site_name Site name (required)
     * @param  string $collection_name Collection name (required)
     * @param  string $field_name Name of the field in the collection. (must not start with $) (required)
     * @param  \OpenAPI\Client\Model\InlineObject14 $inline_object14 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sitesMultiscreenSiteNameCollectionCollectionNameFieldFieldNamePutAsync($site_name, $collection_name, $field_name, $inline_object14 = null)
    {
        return $this->sitesMultiscreenSiteNameCollectionCollectionNameFieldFieldNamePutAsyncWithHttpInfo($site_name, $collection_name, $field_name, $inline_object14)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sitesMultiscreenSiteNameCollectionCollectionNameFieldFieldNamePutAsyncWithHttpInfo
     *
     * Update existing field of a collection
     *
     * @param  string $site_name Site name (required)
     * @param  string $collection_name Collection name (required)
     * @param  string $field_name Name of the field in the collection. (must not start with $) (required)
     * @param  \OpenAPI\Client\Model\InlineObject14 $inline_object14 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sitesMultiscreenSiteNameCollectionCollectionNameFieldFieldNamePutAsyncWithHttpInfo($site_name, $collection_name, $field_name, $inline_object14 = null)
    {
        $returnType = '';
        $request = $this->sitesMultiscreenSiteNameCollectionCollectionNameFieldFieldNamePutRequest($site_name, $collection_name, $field_name, $inline_object14);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sitesMultiscreenSiteNameCollectionCollectionNameFieldFieldNamePut'
     *
     * @param  string $site_name Site name (required)
     * @param  string $collection_name Collection name (required)
     * @param  string $field_name Name of the field in the collection. (must not start with $) (required)
     * @param  \OpenAPI\Client\Model\InlineObject14 $inline_object14 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function sitesMultiscreenSiteNameCollectionCollectionNameFieldFieldNamePutRequest($site_name, $collection_name, $field_name, $inline_object14 = null)
    {
        // verify the required parameter 'site_name' is set
        if ($site_name === null || (is_array($site_name) && count($site_name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $site_name when calling sitesMultiscreenSiteNameCollectionCollectionNameFieldFieldNamePut'
            );
        }
        // verify the required parameter 'collection_name' is set
        if ($collection_name === null || (is_array($collection_name) && count($collection_name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $collection_name when calling sitesMultiscreenSiteNameCollectionCollectionNameFieldFieldNamePut'
            );
        }
        // verify the required parameter 'field_name' is set
        if ($field_name === null || (is_array($field_name) && count($field_name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $field_name when calling sitesMultiscreenSiteNameCollectionCollectionNameFieldFieldNamePut'
            );
        }

        $resourcePath = '/sites/multiscreen/{site_name}/collection/{collection_name}/field/{field_name}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($site_name !== null) {
            $resourcePath = str_replace(
                '{' . 'site_name' . '}',
                ObjectSerializer::toPathValue($site_name),
                $resourcePath
            );
        }
        // path params
        if ($collection_name !== null) {
            $resourcePath = str_replace(
                '{' . 'collection_name' . '}',
                ObjectSerializer::toPathValue($collection_name),
                $resourcePath
            );
        }
        // path params
        if ($field_name !== null) {
            $resourcePath = str_replace(
                '{' . 'field_name' . '}',
                ObjectSerializer::toPathValue($field_name),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($inline_object14)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($inline_object14));
            } else {
                $httpBody = $inline_object14;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sitesMultiscreenSiteNameCollectionCollectionNameFieldPost
     *
     * Add a new field(s) to an existing collection.
     *
     * @param  string $site_name Site name (required)
     * @param  string $collection_name Collection name (required)
     * @param  \OpenAPI\Client\Model\InlineObject13 $inline_object13 inline_object13 (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function sitesMultiscreenSiteNameCollectionCollectionNameFieldPost($site_name, $collection_name, $inline_object13 = null)
    {
        $this->sitesMultiscreenSiteNameCollectionCollectionNameFieldPostWithHttpInfo($site_name, $collection_name, $inline_object13);
    }

    /**
     * Operation sitesMultiscreenSiteNameCollectionCollectionNameFieldPostWithHttpInfo
     *
     * Add a new field(s) to an existing collection.
     *
     * @param  string $site_name Site name (required)
     * @param  string $collection_name Collection name (required)
     * @param  \OpenAPI\Client\Model\InlineObject13 $inline_object13 (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function sitesMultiscreenSiteNameCollectionCollectionNameFieldPostWithHttpInfo($site_name, $collection_name, $inline_object13 = null)
    {
        $request = $this->sitesMultiscreenSiteNameCollectionCollectionNameFieldPostRequest($site_name, $collection_name, $inline_object13);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sitesMultiscreenSiteNameCollectionCollectionNameFieldPostAsync
     *
     * Add a new field(s) to an existing collection.
     *
     * @param  string $site_name Site name (required)
     * @param  string $collection_name Collection name (required)
     * @param  \OpenAPI\Client\Model\InlineObject13 $inline_object13 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sitesMultiscreenSiteNameCollectionCollectionNameFieldPostAsync($site_name, $collection_name, $inline_object13 = null)
    {
        return $this->sitesMultiscreenSiteNameCollectionCollectionNameFieldPostAsyncWithHttpInfo($site_name, $collection_name, $inline_object13)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sitesMultiscreenSiteNameCollectionCollectionNameFieldPostAsyncWithHttpInfo
     *
     * Add a new field(s) to an existing collection.
     *
     * @param  string $site_name Site name (required)
     * @param  string $collection_name Collection name (required)
     * @param  \OpenAPI\Client\Model\InlineObject13 $inline_object13 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sitesMultiscreenSiteNameCollectionCollectionNameFieldPostAsyncWithHttpInfo($site_name, $collection_name, $inline_object13 = null)
    {
        $returnType = '';
        $request = $this->sitesMultiscreenSiteNameCollectionCollectionNameFieldPostRequest($site_name, $collection_name, $inline_object13);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sitesMultiscreenSiteNameCollectionCollectionNameFieldPost'
     *
     * @param  string $site_name Site name (required)
     * @param  string $collection_name Collection name (required)
     * @param  \OpenAPI\Client\Model\InlineObject13 $inline_object13 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function sitesMultiscreenSiteNameCollectionCollectionNameFieldPostRequest($site_name, $collection_name, $inline_object13 = null)
    {
        // verify the required parameter 'site_name' is set
        if ($site_name === null || (is_array($site_name) && count($site_name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $site_name when calling sitesMultiscreenSiteNameCollectionCollectionNameFieldPost'
            );
        }
        // verify the required parameter 'collection_name' is set
        if ($collection_name === null || (is_array($collection_name) && count($collection_name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $collection_name when calling sitesMultiscreenSiteNameCollectionCollectionNameFieldPost'
            );
        }

        $resourcePath = '/sites/multiscreen/{site_name}/collection/{collection_name}/field';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($site_name !== null) {
            $resourcePath = str_replace(
                '{' . 'site_name' . '}',
                ObjectSerializer::toPathValue($site_name),
                $resourcePath
            );
        }
        // path params
        if ($collection_name !== null) {
            $resourcePath = str_replace(
                '{' . 'collection_name' . '}',
                ObjectSerializer::toPathValue($collection_name),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($inline_object13)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($inline_object13));
            } else {
                $httpBody = $inline_object13;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sitesMultiscreenSiteNameCollectionCollectionNameGet
     *
     * Get the fields and data of an existing collection
     *
     * @param  string $site_name Site name (required)
     * @param  string $collection_name Collection name (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\Collection|\OpenAPI\Client\Model\Error
     */
    public function sitesMultiscreenSiteNameCollectionCollectionNameGet($site_name, $collection_name)
    {
        list($response) = $this->sitesMultiscreenSiteNameCollectionCollectionNameGetWithHttpInfo($site_name, $collection_name);
        return $response;
    }

    /**
     * Operation sitesMultiscreenSiteNameCollectionCollectionNameGetWithHttpInfo
     *
     * Get the fields and data of an existing collection
     *
     * @param  string $site_name Site name (required)
     * @param  string $collection_name Collection name (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\Collection|\OpenAPI\Client\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function sitesMultiscreenSiteNameCollectionCollectionNameGetWithHttpInfo($site_name, $collection_name)
    {
        $request = $this->sitesMultiscreenSiteNameCollectionCollectionNameGetRequest($site_name, $collection_name);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\Collection' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\Collection', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                default:
                    if ('\OpenAPI\Client\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\Collection';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\Collection',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sitesMultiscreenSiteNameCollectionCollectionNameGetAsync
     *
     * Get the fields and data of an existing collection
     *
     * @param  string $site_name Site name (required)
     * @param  string $collection_name Collection name (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sitesMultiscreenSiteNameCollectionCollectionNameGetAsync($site_name, $collection_name)
    {
        return $this->sitesMultiscreenSiteNameCollectionCollectionNameGetAsyncWithHttpInfo($site_name, $collection_name)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sitesMultiscreenSiteNameCollectionCollectionNameGetAsyncWithHttpInfo
     *
     * Get the fields and data of an existing collection
     *
     * @param  string $site_name Site name (required)
     * @param  string $collection_name Collection name (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sitesMultiscreenSiteNameCollectionCollectionNameGetAsyncWithHttpInfo($site_name, $collection_name)
    {
        $returnType = '\OpenAPI\Client\Model\Collection';
        $request = $this->sitesMultiscreenSiteNameCollectionCollectionNameGetRequest($site_name, $collection_name);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sitesMultiscreenSiteNameCollectionCollectionNameGet'
     *
     * @param  string $site_name Site name (required)
     * @param  string $collection_name Collection name (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function sitesMultiscreenSiteNameCollectionCollectionNameGetRequest($site_name, $collection_name)
    {
        // verify the required parameter 'site_name' is set
        if ($site_name === null || (is_array($site_name) && count($site_name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $site_name when calling sitesMultiscreenSiteNameCollectionCollectionNameGet'
            );
        }
        // verify the required parameter 'collection_name' is set
        if ($collection_name === null || (is_array($collection_name) && count($collection_name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $collection_name when calling sitesMultiscreenSiteNameCollectionCollectionNameGet'
            );
        }

        $resourcePath = '/sites/multiscreen/{site_name}/collection/{collection_name}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($site_name !== null) {
            $resourcePath = str_replace(
                '{' . 'site_name' . '}',
                ObjectSerializer::toPathValue($site_name),
                $resourcePath
            );
        }
        // path params
        if ($collection_name !== null) {
            $resourcePath = str_replace(
                '{' . 'collection_name' . '}',
                ObjectSerializer::toPathValue($collection_name),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sitesMultiscreenSiteNameCollectionCollectionNamePut
     *
     * Update an existing collection
     *
     * @param  string $site_name Site name (required)
     * @param  string $collection_name Collection name (required)
     * @param  \OpenAPI\Client\Model\InlineObject10 $inline_object10 inline_object10 (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function sitesMultiscreenSiteNameCollectionCollectionNamePut($site_name, $collection_name, $inline_object10 = null)
    {
        $this->sitesMultiscreenSiteNameCollectionCollectionNamePutWithHttpInfo($site_name, $collection_name, $inline_object10);
    }

    /**
     * Operation sitesMultiscreenSiteNameCollectionCollectionNamePutWithHttpInfo
     *
     * Update an existing collection
     *
     * @param  string $site_name Site name (required)
     * @param  string $collection_name Collection name (required)
     * @param  \OpenAPI\Client\Model\InlineObject10 $inline_object10 (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function sitesMultiscreenSiteNameCollectionCollectionNamePutWithHttpInfo($site_name, $collection_name, $inline_object10 = null)
    {
        $request = $this->sitesMultiscreenSiteNameCollectionCollectionNamePutRequest($site_name, $collection_name, $inline_object10);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sitesMultiscreenSiteNameCollectionCollectionNamePutAsync
     *
     * Update an existing collection
     *
     * @param  string $site_name Site name (required)
     * @param  string $collection_name Collection name (required)
     * @param  \OpenAPI\Client\Model\InlineObject10 $inline_object10 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sitesMultiscreenSiteNameCollectionCollectionNamePutAsync($site_name, $collection_name, $inline_object10 = null)
    {
        return $this->sitesMultiscreenSiteNameCollectionCollectionNamePutAsyncWithHttpInfo($site_name, $collection_name, $inline_object10)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sitesMultiscreenSiteNameCollectionCollectionNamePutAsyncWithHttpInfo
     *
     * Update an existing collection
     *
     * @param  string $site_name Site name (required)
     * @param  string $collection_name Collection name (required)
     * @param  \OpenAPI\Client\Model\InlineObject10 $inline_object10 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sitesMultiscreenSiteNameCollectionCollectionNamePutAsyncWithHttpInfo($site_name, $collection_name, $inline_object10 = null)
    {
        $returnType = '';
        $request = $this->sitesMultiscreenSiteNameCollectionCollectionNamePutRequest($site_name, $collection_name, $inline_object10);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sitesMultiscreenSiteNameCollectionCollectionNamePut'
     *
     * @param  string $site_name Site name (required)
     * @param  string $collection_name Collection name (required)
     * @param  \OpenAPI\Client\Model\InlineObject10 $inline_object10 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function sitesMultiscreenSiteNameCollectionCollectionNamePutRequest($site_name, $collection_name, $inline_object10 = null)
    {
        // verify the required parameter 'site_name' is set
        if ($site_name === null || (is_array($site_name) && count($site_name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $site_name when calling sitesMultiscreenSiteNameCollectionCollectionNamePut'
            );
        }
        // verify the required parameter 'collection_name' is set
        if ($collection_name === null || (is_array($collection_name) && count($collection_name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $collection_name when calling sitesMultiscreenSiteNameCollectionCollectionNamePut'
            );
        }

        $resourcePath = '/sites/multiscreen/{site_name}/collection/{collection_name}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($site_name !== null) {
            $resourcePath = str_replace(
                '{' . 'site_name' . '}',
                ObjectSerializer::toPathValue($site_name),
                $resourcePath
            );
        }
        // path params
        if ($collection_name !== null) {
            $resourcePath = str_replace(
                '{' . 'collection_name' . '}',
                ObjectSerializer::toPathValue($collection_name),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($inline_object10)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($inline_object10));
            } else {
                $httpBody = $inline_object10;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sitesMultiscreenSiteNameCollectionCollectionNameRevalidatePost
     *
     * Force Duda to refresh the data from an external URL for a given collection.
     *
     * @param  string $site_name Site name (required)
     * @param  string $collection_name Collection name (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\Collection|\OpenAPI\Client\Model\Error
     */
    public function sitesMultiscreenSiteNameCollectionCollectionNameRevalidatePost($site_name, $collection_name)
    {
        list($response) = $this->sitesMultiscreenSiteNameCollectionCollectionNameRevalidatePostWithHttpInfo($site_name, $collection_name);
        return $response;
    }

    /**
     * Operation sitesMultiscreenSiteNameCollectionCollectionNameRevalidatePostWithHttpInfo
     *
     * Force Duda to refresh the data from an external URL for a given collection.
     *
     * @param  string $site_name Site name (required)
     * @param  string $collection_name Collection name (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\Collection|\OpenAPI\Client\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function sitesMultiscreenSiteNameCollectionCollectionNameRevalidatePostWithHttpInfo($site_name, $collection_name)
    {
        $request = $this->sitesMultiscreenSiteNameCollectionCollectionNameRevalidatePostRequest($site_name, $collection_name);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\Collection' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\Collection', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                default:
                    if ('\OpenAPI\Client\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\Collection';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\Collection',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sitesMultiscreenSiteNameCollectionCollectionNameRevalidatePostAsync
     *
     * Force Duda to refresh the data from an external URL for a given collection.
     *
     * @param  string $site_name Site name (required)
     * @param  string $collection_name Collection name (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sitesMultiscreenSiteNameCollectionCollectionNameRevalidatePostAsync($site_name, $collection_name)
    {
        return $this->sitesMultiscreenSiteNameCollectionCollectionNameRevalidatePostAsyncWithHttpInfo($site_name, $collection_name)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sitesMultiscreenSiteNameCollectionCollectionNameRevalidatePostAsyncWithHttpInfo
     *
     * Force Duda to refresh the data from an external URL for a given collection.
     *
     * @param  string $site_name Site name (required)
     * @param  string $collection_name Collection name (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sitesMultiscreenSiteNameCollectionCollectionNameRevalidatePostAsyncWithHttpInfo($site_name, $collection_name)
    {
        $returnType = '\OpenAPI\Client\Model\Collection';
        $request = $this->sitesMultiscreenSiteNameCollectionCollectionNameRevalidatePostRequest($site_name, $collection_name);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sitesMultiscreenSiteNameCollectionCollectionNameRevalidatePost'
     *
     * @param  string $site_name Site name (required)
     * @param  string $collection_name Collection name (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function sitesMultiscreenSiteNameCollectionCollectionNameRevalidatePostRequest($site_name, $collection_name)
    {
        // verify the required parameter 'site_name' is set
        if ($site_name === null || (is_array($site_name) && count($site_name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $site_name when calling sitesMultiscreenSiteNameCollectionCollectionNameRevalidatePost'
            );
        }
        // verify the required parameter 'collection_name' is set
        if ($collection_name === null || (is_array($collection_name) && count($collection_name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $collection_name when calling sitesMultiscreenSiteNameCollectionCollectionNameRevalidatePost'
            );
        }

        $resourcePath = '/sites/multiscreen/{site_name}/collection/{collection_name}/revalidate';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($site_name !== null) {
            $resourcePath = str_replace(
                '{' . 'site_name' . '}',
                ObjectSerializer::toPathValue($site_name),
                $resourcePath
            );
        }
        // path params
        if ($collection_name !== null) {
            $resourcePath = str_replace(
                '{' . 'collection_name' . '}',
                ObjectSerializer::toPathValue($collection_name),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sitesMultiscreenSiteNameCollectionCollectionNameRowDelete
     *
     * Delete existing rows of data that exist within the collection.
     *
     * @param  string $site_name Site name (required)
     * @param  string $collection_name Collection name (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function sitesMultiscreenSiteNameCollectionCollectionNameRowDelete($site_name, $collection_name)
    {
        $this->sitesMultiscreenSiteNameCollectionCollectionNameRowDeleteWithHttpInfo($site_name, $collection_name);
    }

    /**
     * Operation sitesMultiscreenSiteNameCollectionCollectionNameRowDeleteWithHttpInfo
     *
     * Delete existing rows of data that exist within the collection.
     *
     * @param  string $site_name Site name (required)
     * @param  string $collection_name Collection name (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function sitesMultiscreenSiteNameCollectionCollectionNameRowDeleteWithHttpInfo($site_name, $collection_name)
    {
        $request = $this->sitesMultiscreenSiteNameCollectionCollectionNameRowDeleteRequest($site_name, $collection_name);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sitesMultiscreenSiteNameCollectionCollectionNameRowDeleteAsync
     *
     * Delete existing rows of data that exist within the collection.
     *
     * @param  string $site_name Site name (required)
     * @param  string $collection_name Collection name (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sitesMultiscreenSiteNameCollectionCollectionNameRowDeleteAsync($site_name, $collection_name)
    {
        return $this->sitesMultiscreenSiteNameCollectionCollectionNameRowDeleteAsyncWithHttpInfo($site_name, $collection_name)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sitesMultiscreenSiteNameCollectionCollectionNameRowDeleteAsyncWithHttpInfo
     *
     * Delete existing rows of data that exist within the collection.
     *
     * @param  string $site_name Site name (required)
     * @param  string $collection_name Collection name (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sitesMultiscreenSiteNameCollectionCollectionNameRowDeleteAsyncWithHttpInfo($site_name, $collection_name)
    {
        $returnType = '';
        $request = $this->sitesMultiscreenSiteNameCollectionCollectionNameRowDeleteRequest($site_name, $collection_name);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sitesMultiscreenSiteNameCollectionCollectionNameRowDelete'
     *
     * @param  string $site_name Site name (required)
     * @param  string $collection_name Collection name (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function sitesMultiscreenSiteNameCollectionCollectionNameRowDeleteRequest($site_name, $collection_name)
    {
        // verify the required parameter 'site_name' is set
        if ($site_name === null || (is_array($site_name) && count($site_name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $site_name when calling sitesMultiscreenSiteNameCollectionCollectionNameRowDelete'
            );
        }
        // verify the required parameter 'collection_name' is set
        if ($collection_name === null || (is_array($collection_name) && count($collection_name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $collection_name when calling sitesMultiscreenSiteNameCollectionCollectionNameRowDelete'
            );
        }

        $resourcePath = '/sites/multiscreen/{site_name}/collection/{collection_name}/row';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($site_name !== null) {
            $resourcePath = str_replace(
                '{' . 'site_name' . '}',
                ObjectSerializer::toPathValue($site_name),
                $resourcePath
            );
        }
        // path params
        if ($collection_name !== null) {
            $resourcePath = str_replace(
                '{' . 'collection_name' . '}',
                ObjectSerializer::toPathValue($collection_name),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sitesMultiscreenSiteNameCollectionCollectionNameRowPost
     *
     * Add new row(s) of data into an existing collection. This accepts multiple row values if you&#39;d like to insert more than one.
     *
     * @param  string $site_name Site name (required)
     * @param  string $collection_name Collection name (required)
     * @param  \OpenAPI\Client\Model\InlineObject12 $inline_object12 inline_object12 (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\InlineResponse2007[]|\OpenAPI\Client\Model\Error
     */
    public function sitesMultiscreenSiteNameCollectionCollectionNameRowPost($site_name, $collection_name, $inline_object12 = null)
    {
        list($response) = $this->sitesMultiscreenSiteNameCollectionCollectionNameRowPostWithHttpInfo($site_name, $collection_name, $inline_object12);
        return $response;
    }

    /**
     * Operation sitesMultiscreenSiteNameCollectionCollectionNameRowPostWithHttpInfo
     *
     * Add new row(s) of data into an existing collection. This accepts multiple row values if you&#39;d like to insert more than one.
     *
     * @param  string $site_name Site name (required)
     * @param  string $collection_name Collection name (required)
     * @param  \OpenAPI\Client\Model\InlineObject12 $inline_object12 (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\InlineResponse2007[]|\OpenAPI\Client\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function sitesMultiscreenSiteNameCollectionCollectionNameRowPostWithHttpInfo($site_name, $collection_name, $inline_object12 = null)
    {
        $request = $this->sitesMultiscreenSiteNameCollectionCollectionNameRowPostRequest($site_name, $collection_name, $inline_object12);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\InlineResponse2007[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\InlineResponse2007[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                default:
                    if ('\OpenAPI\Client\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\InlineResponse2007[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\InlineResponse2007[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sitesMultiscreenSiteNameCollectionCollectionNameRowPostAsync
     *
     * Add new row(s) of data into an existing collection. This accepts multiple row values if you&#39;d like to insert more than one.
     *
     * @param  string $site_name Site name (required)
     * @param  string $collection_name Collection name (required)
     * @param  \OpenAPI\Client\Model\InlineObject12 $inline_object12 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sitesMultiscreenSiteNameCollectionCollectionNameRowPostAsync($site_name, $collection_name, $inline_object12 = null)
    {
        return $this->sitesMultiscreenSiteNameCollectionCollectionNameRowPostAsyncWithHttpInfo($site_name, $collection_name, $inline_object12)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sitesMultiscreenSiteNameCollectionCollectionNameRowPostAsyncWithHttpInfo
     *
     * Add new row(s) of data into an existing collection. This accepts multiple row values if you&#39;d like to insert more than one.
     *
     * @param  string $site_name Site name (required)
     * @param  string $collection_name Collection name (required)
     * @param  \OpenAPI\Client\Model\InlineObject12 $inline_object12 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sitesMultiscreenSiteNameCollectionCollectionNameRowPostAsyncWithHttpInfo($site_name, $collection_name, $inline_object12 = null)
    {
        $returnType = '\OpenAPI\Client\Model\InlineResponse2007[]';
        $request = $this->sitesMultiscreenSiteNameCollectionCollectionNameRowPostRequest($site_name, $collection_name, $inline_object12);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sitesMultiscreenSiteNameCollectionCollectionNameRowPost'
     *
     * @param  string $site_name Site name (required)
     * @param  string $collection_name Collection name (required)
     * @param  \OpenAPI\Client\Model\InlineObject12 $inline_object12 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function sitesMultiscreenSiteNameCollectionCollectionNameRowPostRequest($site_name, $collection_name, $inline_object12 = null)
    {
        // verify the required parameter 'site_name' is set
        if ($site_name === null || (is_array($site_name) && count($site_name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $site_name when calling sitesMultiscreenSiteNameCollectionCollectionNameRowPost'
            );
        }
        // verify the required parameter 'collection_name' is set
        if ($collection_name === null || (is_array($collection_name) && count($collection_name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $collection_name when calling sitesMultiscreenSiteNameCollectionCollectionNameRowPost'
            );
        }

        $resourcePath = '/sites/multiscreen/{site_name}/collection/{collection_name}/row';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($site_name !== null) {
            $resourcePath = str_replace(
                '{' . 'site_name' . '}',
                ObjectSerializer::toPathValue($site_name),
                $resourcePath
            );
        }
        // path params
        if ($collection_name !== null) {
            $resourcePath = str_replace(
                '{' . 'collection_name' . '}',
                ObjectSerializer::toPathValue($collection_name),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($inline_object12)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($inline_object12));
            } else {
                $httpBody = $inline_object12;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sitesMultiscreenSiteNameCollectionCollectionNameRowPut
     *
     * Update existing collection rows.
     *
     * @param  string $site_name Site name (required)
     * @param  string $collection_name Collection name (required)
     * @param  \OpenAPI\Client\Model\InlineObject11 $inline_object11 inline_object11 (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function sitesMultiscreenSiteNameCollectionCollectionNameRowPut($site_name, $collection_name, $inline_object11 = null)
    {
        $this->sitesMultiscreenSiteNameCollectionCollectionNameRowPutWithHttpInfo($site_name, $collection_name, $inline_object11);
    }

    /**
     * Operation sitesMultiscreenSiteNameCollectionCollectionNameRowPutWithHttpInfo
     *
     * Update existing collection rows.
     *
     * @param  string $site_name Site name (required)
     * @param  string $collection_name Collection name (required)
     * @param  \OpenAPI\Client\Model\InlineObject11 $inline_object11 (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function sitesMultiscreenSiteNameCollectionCollectionNameRowPutWithHttpInfo($site_name, $collection_name, $inline_object11 = null)
    {
        $request = $this->sitesMultiscreenSiteNameCollectionCollectionNameRowPutRequest($site_name, $collection_name, $inline_object11);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sitesMultiscreenSiteNameCollectionCollectionNameRowPutAsync
     *
     * Update existing collection rows.
     *
     * @param  string $site_name Site name (required)
     * @param  string $collection_name Collection name (required)
     * @param  \OpenAPI\Client\Model\InlineObject11 $inline_object11 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sitesMultiscreenSiteNameCollectionCollectionNameRowPutAsync($site_name, $collection_name, $inline_object11 = null)
    {
        return $this->sitesMultiscreenSiteNameCollectionCollectionNameRowPutAsyncWithHttpInfo($site_name, $collection_name, $inline_object11)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sitesMultiscreenSiteNameCollectionCollectionNameRowPutAsyncWithHttpInfo
     *
     * Update existing collection rows.
     *
     * @param  string $site_name Site name (required)
     * @param  string $collection_name Collection name (required)
     * @param  \OpenAPI\Client\Model\InlineObject11 $inline_object11 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sitesMultiscreenSiteNameCollectionCollectionNameRowPutAsyncWithHttpInfo($site_name, $collection_name, $inline_object11 = null)
    {
        $returnType = '';
        $request = $this->sitesMultiscreenSiteNameCollectionCollectionNameRowPutRequest($site_name, $collection_name, $inline_object11);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sitesMultiscreenSiteNameCollectionCollectionNameRowPut'
     *
     * @param  string $site_name Site name (required)
     * @param  string $collection_name Collection name (required)
     * @param  \OpenAPI\Client\Model\InlineObject11 $inline_object11 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function sitesMultiscreenSiteNameCollectionCollectionNameRowPutRequest($site_name, $collection_name, $inline_object11 = null)
    {
        // verify the required parameter 'site_name' is set
        if ($site_name === null || (is_array($site_name) && count($site_name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $site_name when calling sitesMultiscreenSiteNameCollectionCollectionNameRowPut'
            );
        }
        // verify the required parameter 'collection_name' is set
        if ($collection_name === null || (is_array($collection_name) && count($collection_name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $collection_name when calling sitesMultiscreenSiteNameCollectionCollectionNameRowPut'
            );
        }

        $resourcePath = '/sites/multiscreen/{site_name}/collection/{collection_name}/row';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($site_name !== null) {
            $resourcePath = str_replace(
                '{' . 'site_name' . '}',
                ObjectSerializer::toPathValue($site_name),
                $resourcePath
            );
        }
        // path params
        if ($collection_name !== null) {
            $resourcePath = str_replace(
                '{' . 'collection_name' . '}',
                ObjectSerializer::toPathValue($collection_name),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($inline_object11)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($inline_object11));
            } else {
                $httpBody = $inline_object11;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sitesMultiscreenSiteNameCollectionGet
     *
     * Get all collections that exist on this website.
     *
     * @param  string $site_name Site name (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\Collection[]|\OpenAPI\Client\Model\Error
     */
    public function sitesMultiscreenSiteNameCollectionGet($site_name)
    {
        list($response) = $this->sitesMultiscreenSiteNameCollectionGetWithHttpInfo($site_name);
        return $response;
    }

    /**
     * Operation sitesMultiscreenSiteNameCollectionGetWithHttpInfo
     *
     * Get all collections that exist on this website.
     *
     * @param  string $site_name Site name (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\Collection[]|\OpenAPI\Client\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function sitesMultiscreenSiteNameCollectionGetWithHttpInfo($site_name)
    {
        $request = $this->sitesMultiscreenSiteNameCollectionGetRequest($site_name);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\Collection[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\Collection[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                default:
                    if ('\OpenAPI\Client\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\Collection[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\Collection[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sitesMultiscreenSiteNameCollectionGetAsync
     *
     * Get all collections that exist on this website.
     *
     * @param  string $site_name Site name (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sitesMultiscreenSiteNameCollectionGetAsync($site_name)
    {
        return $this->sitesMultiscreenSiteNameCollectionGetAsyncWithHttpInfo($site_name)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sitesMultiscreenSiteNameCollectionGetAsyncWithHttpInfo
     *
     * Get all collections that exist on this website.
     *
     * @param  string $site_name Site name (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sitesMultiscreenSiteNameCollectionGetAsyncWithHttpInfo($site_name)
    {
        $returnType = '\OpenAPI\Client\Model\Collection[]';
        $request = $this->sitesMultiscreenSiteNameCollectionGetRequest($site_name);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sitesMultiscreenSiteNameCollectionGet'
     *
     * @param  string $site_name Site name (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function sitesMultiscreenSiteNameCollectionGetRequest($site_name)
    {
        // verify the required parameter 'site_name' is set
        if ($site_name === null || (is_array($site_name) && count($site_name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $site_name when calling sitesMultiscreenSiteNameCollectionGet'
            );
        }

        $resourcePath = '/sites/multiscreen/{site_name}/collection';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($site_name !== null) {
            $resourcePath = str_replace(
                '{' . 'site_name' . '}',
                ObjectSerializer::toPathValue($site_name),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sitesMultiscreenSiteNameCollectionPost
     *
     * Create a new collection within a site
     *
     * @param  string $site_name Site name (required)
     * @param  \OpenAPI\Client\Model\InlineObject9 $inline_object9 inline_object9 (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function sitesMultiscreenSiteNameCollectionPost($site_name, $inline_object9 = null)
    {
        $this->sitesMultiscreenSiteNameCollectionPostWithHttpInfo($site_name, $inline_object9);
    }

    /**
     * Operation sitesMultiscreenSiteNameCollectionPostWithHttpInfo
     *
     * Create a new collection within a site
     *
     * @param  string $site_name Site name (required)
     * @param  \OpenAPI\Client\Model\InlineObject9 $inline_object9 (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function sitesMultiscreenSiteNameCollectionPostWithHttpInfo($site_name, $inline_object9 = null)
    {
        $request = $this->sitesMultiscreenSiteNameCollectionPostRequest($site_name, $inline_object9);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sitesMultiscreenSiteNameCollectionPostAsync
     *
     * Create a new collection within a site
     *
     * @param  string $site_name Site name (required)
     * @param  \OpenAPI\Client\Model\InlineObject9 $inline_object9 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sitesMultiscreenSiteNameCollectionPostAsync($site_name, $inline_object9 = null)
    {
        return $this->sitesMultiscreenSiteNameCollectionPostAsyncWithHttpInfo($site_name, $inline_object9)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sitesMultiscreenSiteNameCollectionPostAsyncWithHttpInfo
     *
     * Create a new collection within a site
     *
     * @param  string $site_name Site name (required)
     * @param  \OpenAPI\Client\Model\InlineObject9 $inline_object9 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sitesMultiscreenSiteNameCollectionPostAsyncWithHttpInfo($site_name, $inline_object9 = null)
    {
        $returnType = '';
        $request = $this->sitesMultiscreenSiteNameCollectionPostRequest($site_name, $inline_object9);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sitesMultiscreenSiteNameCollectionPost'
     *
     * @param  string $site_name Site name (required)
     * @param  \OpenAPI\Client\Model\InlineObject9 $inline_object9 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function sitesMultiscreenSiteNameCollectionPostRequest($site_name, $inline_object9 = null)
    {
        // verify the required parameter 'site_name' is set
        if ($site_name === null || (is_array($site_name) && count($site_name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $site_name when calling sitesMultiscreenSiteNameCollectionPost'
            );
        }

        $resourcePath = '/sites/multiscreen/{site_name}/collection';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($site_name !== null) {
            $resourcePath = str_replace(
                '{' . 'site_name' . '}',
                ObjectSerializer::toPathValue($site_name),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($inline_object9)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($inline_object9));
            } else {
                $httpBody = $inline_object9;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
