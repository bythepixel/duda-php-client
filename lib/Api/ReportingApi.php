<?php
/**
 * ReportingApi
 * PHP version 7.3
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Duda
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.4.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use OpenAPI\Client\ApiException;
use OpenAPI\Client\Configuration;
use OpenAPI\Client\HeaderSelector;
use OpenAPI\Client\ObjectSerializer;

/**
 * ReportingApi Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class ReportingApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation accountsAccountNameSitesSiteNameStatsEmailDelete
     *
     * Unsubscribe a customer (or staff member) to statistics emails for a specific site.
     *
     * @param  string $account_name The account name is a unique reference to the account (required)
     * @param  string $site_name Site name (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function accountsAccountNameSitesSiteNameStatsEmailDelete($account_name, $site_name)
    {
        $this->accountsAccountNameSitesSiteNameStatsEmailDeleteWithHttpInfo($account_name, $site_name);
    }

    /**
     * Operation accountsAccountNameSitesSiteNameStatsEmailDeleteWithHttpInfo
     *
     * Unsubscribe a customer (or staff member) to statistics emails for a specific site.
     *
     * @param  string $account_name The account name is a unique reference to the account (required)
     * @param  string $site_name Site name (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function accountsAccountNameSitesSiteNameStatsEmailDeleteWithHttpInfo($account_name, $site_name)
    {
        $request = $this->accountsAccountNameSitesSiteNameStatsEmailDeleteRequest($account_name, $site_name);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation accountsAccountNameSitesSiteNameStatsEmailDeleteAsync
     *
     * Unsubscribe a customer (or staff member) to statistics emails for a specific site.
     *
     * @param  string $account_name The account name is a unique reference to the account (required)
     * @param  string $site_name Site name (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function accountsAccountNameSitesSiteNameStatsEmailDeleteAsync($account_name, $site_name)
    {
        return $this->accountsAccountNameSitesSiteNameStatsEmailDeleteAsyncWithHttpInfo($account_name, $site_name)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation accountsAccountNameSitesSiteNameStatsEmailDeleteAsyncWithHttpInfo
     *
     * Unsubscribe a customer (or staff member) to statistics emails for a specific site.
     *
     * @param  string $account_name The account name is a unique reference to the account (required)
     * @param  string $site_name Site name (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function accountsAccountNameSitesSiteNameStatsEmailDeleteAsyncWithHttpInfo($account_name, $site_name)
    {
        $returnType = '';
        $request = $this->accountsAccountNameSitesSiteNameStatsEmailDeleteRequest($account_name, $site_name);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'accountsAccountNameSitesSiteNameStatsEmailDelete'
     *
     * @param  string $account_name The account name is a unique reference to the account (required)
     * @param  string $site_name Site name (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function accountsAccountNameSitesSiteNameStatsEmailDeleteRequest($account_name, $site_name)
    {
        // verify the required parameter 'account_name' is set
        if ($account_name === null || (is_array($account_name) && count($account_name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $account_name when calling accountsAccountNameSitesSiteNameStatsEmailDelete'
            );
        }
        // verify the required parameter 'site_name' is set
        if ($site_name === null || (is_array($site_name) && count($site_name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $site_name when calling accountsAccountNameSitesSiteNameStatsEmailDelete'
            );
        }

        $resourcePath = '/accounts/{account_name}/sites/{site_name}/stats-email';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($account_name !== null) {
            $resourcePath = str_replace(
                '{' . 'account_name' . '}',
                ObjectSerializer::toPathValue($account_name),
                $resourcePath
            );
        }
        // path params
        if ($site_name !== null) {
            $resourcePath = str_replace(
                '{' . 'site_name' . '}',
                ObjectSerializer::toPathValue($site_name),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation accountsAccountNameSitesSiteNameStatsEmailGet
     *
     * Get the status of stats emails for a customer on a given site.
     *
     * @param  string $account_name The account name is a unique reference to the account (required)
     * @param  string $site_name Site name (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\InlineResponse2008|\OpenAPI\Client\Model\Error
     */
    public function accountsAccountNameSitesSiteNameStatsEmailGet($account_name, $site_name)
    {
        list($response) = $this->accountsAccountNameSitesSiteNameStatsEmailGetWithHttpInfo($account_name, $site_name);
        return $response;
    }

    /**
     * Operation accountsAccountNameSitesSiteNameStatsEmailGetWithHttpInfo
     *
     * Get the status of stats emails for a customer on a given site.
     *
     * @param  string $account_name The account name is a unique reference to the account (required)
     * @param  string $site_name Site name (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\InlineResponse2008|\OpenAPI\Client\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function accountsAccountNameSitesSiteNameStatsEmailGetWithHttpInfo($account_name, $site_name)
    {
        $request = $this->accountsAccountNameSitesSiteNameStatsEmailGetRequest($account_name, $site_name);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\InlineResponse2008' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\InlineResponse2008', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                default:
                    if ('\OpenAPI\Client\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\InlineResponse2008';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\InlineResponse2008',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation accountsAccountNameSitesSiteNameStatsEmailGetAsync
     *
     * Get the status of stats emails for a customer on a given site.
     *
     * @param  string $account_name The account name is a unique reference to the account (required)
     * @param  string $site_name Site name (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function accountsAccountNameSitesSiteNameStatsEmailGetAsync($account_name, $site_name)
    {
        return $this->accountsAccountNameSitesSiteNameStatsEmailGetAsyncWithHttpInfo($account_name, $site_name)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation accountsAccountNameSitesSiteNameStatsEmailGetAsyncWithHttpInfo
     *
     * Get the status of stats emails for a customer on a given site.
     *
     * @param  string $account_name The account name is a unique reference to the account (required)
     * @param  string $site_name Site name (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function accountsAccountNameSitesSiteNameStatsEmailGetAsyncWithHttpInfo($account_name, $site_name)
    {
        $returnType = '\OpenAPI\Client\Model\InlineResponse2008';
        $request = $this->accountsAccountNameSitesSiteNameStatsEmailGetRequest($account_name, $site_name);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'accountsAccountNameSitesSiteNameStatsEmailGet'
     *
     * @param  string $account_name The account name is a unique reference to the account (required)
     * @param  string $site_name Site name (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function accountsAccountNameSitesSiteNameStatsEmailGetRequest($account_name, $site_name)
    {
        // verify the required parameter 'account_name' is set
        if ($account_name === null || (is_array($account_name) && count($account_name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $account_name when calling accountsAccountNameSitesSiteNameStatsEmailGet'
            );
        }
        // verify the required parameter 'site_name' is set
        if ($site_name === null || (is_array($site_name) && count($site_name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $site_name when calling accountsAccountNameSitesSiteNameStatsEmailGet'
            );
        }

        $resourcePath = '/accounts/{account_name}/sites/{site_name}/stats-email';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($account_name !== null) {
            $resourcePath = str_replace(
                '{' . 'account_name' . '}',
                ObjectSerializer::toPathValue($account_name),
                $resourcePath
            );
        }
        // path params
        if ($site_name !== null) {
            $resourcePath = str_replace(
                '{' . 'site_name' . '}',
                ObjectSerializer::toPathValue($site_name),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation accountsAccountNameSitesSiteNameStatsEmailPost
     *
     * Subscribe a customer (or staff member) to statistics emails for a specific site.
     *
     * @param  string $account_name The account name is a unique reference to the account (required)
     * @param  string $site_name Site name (required)
     * @param  \OpenAPI\Client\Model\InlineObject15 $inline_object15 inline_object15 (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function accountsAccountNameSitesSiteNameStatsEmailPost($account_name, $site_name, $inline_object15 = null)
    {
        $this->accountsAccountNameSitesSiteNameStatsEmailPostWithHttpInfo($account_name, $site_name, $inline_object15);
    }

    /**
     * Operation accountsAccountNameSitesSiteNameStatsEmailPostWithHttpInfo
     *
     * Subscribe a customer (or staff member) to statistics emails for a specific site.
     *
     * @param  string $account_name The account name is a unique reference to the account (required)
     * @param  string $site_name Site name (required)
     * @param  \OpenAPI\Client\Model\InlineObject15 $inline_object15 (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function accountsAccountNameSitesSiteNameStatsEmailPostWithHttpInfo($account_name, $site_name, $inline_object15 = null)
    {
        $request = $this->accountsAccountNameSitesSiteNameStatsEmailPostRequest($account_name, $site_name, $inline_object15);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation accountsAccountNameSitesSiteNameStatsEmailPostAsync
     *
     * Subscribe a customer (or staff member) to statistics emails for a specific site.
     *
     * @param  string $account_name The account name is a unique reference to the account (required)
     * @param  string $site_name Site name (required)
     * @param  \OpenAPI\Client\Model\InlineObject15 $inline_object15 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function accountsAccountNameSitesSiteNameStatsEmailPostAsync($account_name, $site_name, $inline_object15 = null)
    {
        return $this->accountsAccountNameSitesSiteNameStatsEmailPostAsyncWithHttpInfo($account_name, $site_name, $inline_object15)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation accountsAccountNameSitesSiteNameStatsEmailPostAsyncWithHttpInfo
     *
     * Subscribe a customer (or staff member) to statistics emails for a specific site.
     *
     * @param  string $account_name The account name is a unique reference to the account (required)
     * @param  string $site_name Site name (required)
     * @param  \OpenAPI\Client\Model\InlineObject15 $inline_object15 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function accountsAccountNameSitesSiteNameStatsEmailPostAsyncWithHttpInfo($account_name, $site_name, $inline_object15 = null)
    {
        $returnType = '';
        $request = $this->accountsAccountNameSitesSiteNameStatsEmailPostRequest($account_name, $site_name, $inline_object15);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'accountsAccountNameSitesSiteNameStatsEmailPost'
     *
     * @param  string $account_name The account name is a unique reference to the account (required)
     * @param  string $site_name Site name (required)
     * @param  \OpenAPI\Client\Model\InlineObject15 $inline_object15 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function accountsAccountNameSitesSiteNameStatsEmailPostRequest($account_name, $site_name, $inline_object15 = null)
    {
        // verify the required parameter 'account_name' is set
        if ($account_name === null || (is_array($account_name) && count($account_name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $account_name when calling accountsAccountNameSitesSiteNameStatsEmailPost'
            );
        }
        // verify the required parameter 'site_name' is set
        if ($site_name === null || (is_array($site_name) && count($site_name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $site_name when calling accountsAccountNameSitesSiteNameStatsEmailPost'
            );
        }

        $resourcePath = '/accounts/{account_name}/sites/{site_name}/stats-email';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($account_name !== null) {
            $resourcePath = str_replace(
                '{' . 'account_name' . '}',
                ObjectSerializer::toPathValue($account_name),
                $resourcePath
            );
        }
        // path params
        if ($site_name !== null) {
            $resourcePath = str_replace(
                '{' . 'site_name' . '}',
                ObjectSerializer::toPathValue($site_name),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($inline_object15)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($inline_object15));
            } else {
                $httpBody = $inline_object15;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation multiscreenAnalyticsSiteSiteNameGet
     *
     * Get analytics history for a specific website over a certain amount of time.
     *
     * @param  string $site_name Site name (required)
     * @param  string $from Start date (optional)
     * @param  string $to End date (optional)
     * @param  string $dimension The type of dimension to query the data by. (optional)
     * @param  string $result Whether to return results with traffic metrics or activities metric. (optional)
     * @param  string $date_granularity date_granularity (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return OneOfAnalyticsActivitiesAnalyticsTraffic[]|\OpenAPI\Client\Model\Error
     */
    public function multiscreenAnalyticsSiteSiteNameGet($site_name, $from = null, $to = null, $dimension = null, $result = null, $date_granularity = null)
    {
        list($response) = $this->multiscreenAnalyticsSiteSiteNameGetWithHttpInfo($site_name, $from, $to, $dimension, $result, $date_granularity);
        return $response;
    }

    /**
     * Operation multiscreenAnalyticsSiteSiteNameGetWithHttpInfo
     *
     * Get analytics history for a specific website over a certain amount of time.
     *
     * @param  string $site_name Site name (required)
     * @param  string $from Start date (optional)
     * @param  string $to End date (optional)
     * @param  string $dimension The type of dimension to query the data by. (optional)
     * @param  string $result Whether to return results with traffic metrics or activities metric. (optional)
     * @param  string $date_granularity (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of OneOfAnalyticsActivitiesAnalyticsTraffic[]|\OpenAPI\Client\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function multiscreenAnalyticsSiteSiteNameGetWithHttpInfo($site_name, $from = null, $to = null, $dimension = null, $result = null, $date_granularity = null)
    {
        $request = $this->multiscreenAnalyticsSiteSiteNameGetRequest($site_name, $from, $to, $dimension, $result, $date_granularity);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('OneOfAnalyticsActivitiesAnalyticsTraffic[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'OneOfAnalyticsActivitiesAnalyticsTraffic[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                default:
                    if ('\OpenAPI\Client\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'OneOfAnalyticsActivitiesAnalyticsTraffic[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'OneOfAnalyticsActivitiesAnalyticsTraffic[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation multiscreenAnalyticsSiteSiteNameGetAsync
     *
     * Get analytics history for a specific website over a certain amount of time.
     *
     * @param  string $site_name Site name (required)
     * @param  string $from Start date (optional)
     * @param  string $to End date (optional)
     * @param  string $dimension The type of dimension to query the data by. (optional)
     * @param  string $result Whether to return results with traffic metrics or activities metric. (optional)
     * @param  string $date_granularity (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function multiscreenAnalyticsSiteSiteNameGetAsync($site_name, $from = null, $to = null, $dimension = null, $result = null, $date_granularity = null)
    {
        return $this->multiscreenAnalyticsSiteSiteNameGetAsyncWithHttpInfo($site_name, $from, $to, $dimension, $result, $date_granularity)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation multiscreenAnalyticsSiteSiteNameGetAsyncWithHttpInfo
     *
     * Get analytics history for a specific website over a certain amount of time.
     *
     * @param  string $site_name Site name (required)
     * @param  string $from Start date (optional)
     * @param  string $to End date (optional)
     * @param  string $dimension The type of dimension to query the data by. (optional)
     * @param  string $result Whether to return results with traffic metrics or activities metric. (optional)
     * @param  string $date_granularity (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function multiscreenAnalyticsSiteSiteNameGetAsyncWithHttpInfo($site_name, $from = null, $to = null, $dimension = null, $result = null, $date_granularity = null)
    {
        $returnType = 'OneOfAnalyticsActivitiesAnalyticsTraffic[]';
        $request = $this->multiscreenAnalyticsSiteSiteNameGetRequest($site_name, $from, $to, $dimension, $result, $date_granularity);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'multiscreenAnalyticsSiteSiteNameGet'
     *
     * @param  string $site_name Site name (required)
     * @param  string $from Start date (optional)
     * @param  string $to End date (optional)
     * @param  string $dimension The type of dimension to query the data by. (optional)
     * @param  string $result Whether to return results with traffic metrics or activities metric. (optional)
     * @param  string $date_granularity (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function multiscreenAnalyticsSiteSiteNameGetRequest($site_name, $from = null, $to = null, $dimension = null, $result = null, $date_granularity = null)
    {
        // verify the required parameter 'site_name' is set
        if ($site_name === null || (is_array($site_name) && count($site_name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $site_name when calling multiscreenAnalyticsSiteSiteNameGet'
            );
        }

        $resourcePath = '/multiscreen/analytics/site/{site_name}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($from !== null) {
            if('form' === 'form' && is_array($from)) {
                foreach($from as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['from'] = $from;
            }
        }
        // query params
        if ($to !== null) {
            if('form' === 'form' && is_array($to)) {
                foreach($to as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['to'] = $to;
            }
        }
        // query params
        if ($dimension !== null) {
            if('form' === 'form' && is_array($dimension)) {
                foreach($dimension as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['dimension'] = $dimension;
            }
        }
        // query params
        if ($result !== null) {
            if('form' === 'form' && is_array($result)) {
                foreach($result as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['result'] = $result;
            }
        }
        // query params
        if ($date_granularity !== null) {
            if('form' === 'form' && is_array($date_granularity)) {
                foreach($date_granularity as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['dateGranularity'] = $date_granularity;
            }
        }


        // path params
        if ($site_name !== null) {
            $resourcePath = str_replace(
                '{' . 'site_name' . '}',
                ObjectSerializer::toPathValue($site_name),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sitesMultiscreenCreatedGet
     *
     * Get a list of Sites created within a span of time.
     *
     * @param  string $from Start date (optional)
     * @param  string $to End date (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return string[]|\OpenAPI\Client\Model\Error
     */
    public function sitesMultiscreenCreatedGet($from = null, $to = null)
    {
        list($response) = $this->sitesMultiscreenCreatedGetWithHttpInfo($from, $to);
        return $response;
    }

    /**
     * Operation sitesMultiscreenCreatedGetWithHttpInfo
     *
     * Get a list of Sites created within a span of time.
     *
     * @param  string $from Start date (optional)
     * @param  string $to End date (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of string[]|\OpenAPI\Client\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function sitesMultiscreenCreatedGetWithHttpInfo($from = null, $to = null)
    {
        $request = $this->sitesMultiscreenCreatedGetRequest($from, $to);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('string[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'string[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                default:
                    if ('\OpenAPI\Client\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'string[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sitesMultiscreenCreatedGetAsync
     *
     * Get a list of Sites created within a span of time.
     *
     * @param  string $from Start date (optional)
     * @param  string $to End date (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sitesMultiscreenCreatedGetAsync($from = null, $to = null)
    {
        return $this->sitesMultiscreenCreatedGetAsyncWithHttpInfo($from, $to)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sitesMultiscreenCreatedGetAsyncWithHttpInfo
     *
     * Get a list of Sites created within a span of time.
     *
     * @param  string $from Start date (optional)
     * @param  string $to End date (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sitesMultiscreenCreatedGetAsyncWithHttpInfo($from = null, $to = null)
    {
        $returnType = 'string[]';
        $request = $this->sitesMultiscreenCreatedGetRequest($from, $to);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sitesMultiscreenCreatedGet'
     *
     * @param  string $from Start date (optional)
     * @param  string $to End date (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function sitesMultiscreenCreatedGetRequest($from = null, $to = null)
    {

        $resourcePath = '/sites/multiscreen/created';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($from !== null) {
            if('form' === 'form' && is_array($from)) {
                foreach($from as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['from'] = $from;
            }
        }
        // query params
        if ($to !== null) {
            if('form' === 'form' && is_array($to)) {
                foreach($to as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['to'] = $to;
            }
        }




        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sitesMultiscreenGetFormsSiteNameGet
     *
     * Get all the contact form submissions from a given site.
     *
     * @param  string $site_name Site name (required)
     * @param  string $from Start date (optional)
     * @param  string $to End date (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\Form[]|\OpenAPI\Client\Model\Error
     */
    public function sitesMultiscreenGetFormsSiteNameGet($site_name, $from = null, $to = null)
    {
        list($response) = $this->sitesMultiscreenGetFormsSiteNameGetWithHttpInfo($site_name, $from, $to);
        return $response;
    }

    /**
     * Operation sitesMultiscreenGetFormsSiteNameGetWithHttpInfo
     *
     * Get all the contact form submissions from a given site.
     *
     * @param  string $site_name Site name (required)
     * @param  string $from Start date (optional)
     * @param  string $to End date (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\Form[]|\OpenAPI\Client\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function sitesMultiscreenGetFormsSiteNameGetWithHttpInfo($site_name, $from = null, $to = null)
    {
        $request = $this->sitesMultiscreenGetFormsSiteNameGetRequest($site_name, $from, $to);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\Form[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\Form[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                default:
                    if ('\OpenAPI\Client\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\Form[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\Form[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sitesMultiscreenGetFormsSiteNameGetAsync
     *
     * Get all the contact form submissions from a given site.
     *
     * @param  string $site_name Site name (required)
     * @param  string $from Start date (optional)
     * @param  string $to End date (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sitesMultiscreenGetFormsSiteNameGetAsync($site_name, $from = null, $to = null)
    {
        return $this->sitesMultiscreenGetFormsSiteNameGetAsyncWithHttpInfo($site_name, $from, $to)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sitesMultiscreenGetFormsSiteNameGetAsyncWithHttpInfo
     *
     * Get all the contact form submissions from a given site.
     *
     * @param  string $site_name Site name (required)
     * @param  string $from Start date (optional)
     * @param  string $to End date (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sitesMultiscreenGetFormsSiteNameGetAsyncWithHttpInfo($site_name, $from = null, $to = null)
    {
        $returnType = '\OpenAPI\Client\Model\Form[]';
        $request = $this->sitesMultiscreenGetFormsSiteNameGetRequest($site_name, $from, $to);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sitesMultiscreenGetFormsSiteNameGet'
     *
     * @param  string $site_name Site name (required)
     * @param  string $from Start date (optional)
     * @param  string $to End date (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function sitesMultiscreenGetFormsSiteNameGetRequest($site_name, $from = null, $to = null)
    {
        // verify the required parameter 'site_name' is set
        if ($site_name === null || (is_array($site_name) && count($site_name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $site_name when calling sitesMultiscreenGetFormsSiteNameGet'
            );
        }

        $resourcePath = '/sites/multiscreen/get-forms/{site_name}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($from !== null) {
            if('form' === 'form' && is_array($from)) {
                foreach($from as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['from'] = $from;
            }
        }
        // query params
        if ($to !== null) {
            if('form' === 'form' && is_array($to)) {
                foreach($to as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['to'] = $to;
            }
        }


        // path params
        if ($site_name !== null) {
            $resourcePath = str_replace(
                '{' . 'site_name' . '}',
                ObjectSerializer::toPathValue($site_name),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sitesMultiscreenPublishedGet
     *
     * Get a list of recently published websites in your account.
     *
     * @param  string $last_days The number of days in which you would like get sites that have been published (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return string[]|\OpenAPI\Client\Model\Error
     */
    public function sitesMultiscreenPublishedGet($last_days = null)
    {
        list($response) = $this->sitesMultiscreenPublishedGetWithHttpInfo($last_days);
        return $response;
    }

    /**
     * Operation sitesMultiscreenPublishedGetWithHttpInfo
     *
     * Get a list of recently published websites in your account.
     *
     * @param  string $last_days The number of days in which you would like get sites that have been published (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of string[]|\OpenAPI\Client\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function sitesMultiscreenPublishedGetWithHttpInfo($last_days = null)
    {
        $request = $this->sitesMultiscreenPublishedGetRequest($last_days);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('string[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'string[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                default:
                    if ('\OpenAPI\Client\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'string[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sitesMultiscreenPublishedGetAsync
     *
     * Get a list of recently published websites in your account.
     *
     * @param  string $last_days The number of days in which you would like get sites that have been published (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sitesMultiscreenPublishedGetAsync($last_days = null)
    {
        return $this->sitesMultiscreenPublishedGetAsyncWithHttpInfo($last_days)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sitesMultiscreenPublishedGetAsyncWithHttpInfo
     *
     * Get a list of recently published websites in your account.
     *
     * @param  string $last_days The number of days in which you would like get sites that have been published (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sitesMultiscreenPublishedGetAsyncWithHttpInfo($last_days = null)
    {
        $returnType = 'string[]';
        $request = $this->sitesMultiscreenPublishedGetRequest($last_days);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sitesMultiscreenPublishedGet'
     *
     * @param  string $last_days The number of days in which you would like get sites that have been published (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function sitesMultiscreenPublishedGetRequest($last_days = null)
    {

        $resourcePath = '/sites/multiscreen/published';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($last_days !== null) {
            if('form' === 'form' && is_array($last_days)) {
                foreach($last_days as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['lastDays'] = $last_days;
            }
        }




        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sitesMultiscreenSiteNameActivitiesGet
     *
     * Get activity history for a specific website over a certain amount of time.
     *
     * @param  string $site_name Site name (required)
     * @param  int $limit Items to be retrieved per page. Lower bound: 1, Upper bound: 100 (optional)
     * @param  int $offset The index of the first item to return. Must be greater or equal to zero. (optional)
     * @param  string $from Start date (optional)
     * @param  string $to End date (optional)
     * @param  string $activities Activities are the activity types you are looking to retrieve - this parameter can be included multiple times in your query. (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\Activity[]|\OpenAPI\Client\Model\Error
     */
    public function sitesMultiscreenSiteNameActivitiesGet($site_name, $limit = null, $offset = null, $from = null, $to = null, $activities = null)
    {
        list($response) = $this->sitesMultiscreenSiteNameActivitiesGetWithHttpInfo($site_name, $limit, $offset, $from, $to, $activities);
        return $response;
    }

    /**
     * Operation sitesMultiscreenSiteNameActivitiesGetWithHttpInfo
     *
     * Get activity history for a specific website over a certain amount of time.
     *
     * @param  string $site_name Site name (required)
     * @param  int $limit Items to be retrieved per page. Lower bound: 1, Upper bound: 100 (optional)
     * @param  int $offset The index of the first item to return. Must be greater or equal to zero. (optional)
     * @param  string $from Start date (optional)
     * @param  string $to End date (optional)
     * @param  string $activities Activities are the activity types you are looking to retrieve - this parameter can be included multiple times in your query. (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\Activity[]|\OpenAPI\Client\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function sitesMultiscreenSiteNameActivitiesGetWithHttpInfo($site_name, $limit = null, $offset = null, $from = null, $to = null, $activities = null)
    {
        $request = $this->sitesMultiscreenSiteNameActivitiesGetRequest($site_name, $limit, $offset, $from, $to, $activities);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\Activity[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\Activity[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                default:
                    if ('\OpenAPI\Client\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\Activity[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\Activity[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sitesMultiscreenSiteNameActivitiesGetAsync
     *
     * Get activity history for a specific website over a certain amount of time.
     *
     * @param  string $site_name Site name (required)
     * @param  int $limit Items to be retrieved per page. Lower bound: 1, Upper bound: 100 (optional)
     * @param  int $offset The index of the first item to return. Must be greater or equal to zero. (optional)
     * @param  string $from Start date (optional)
     * @param  string $to End date (optional)
     * @param  string $activities Activities are the activity types you are looking to retrieve - this parameter can be included multiple times in your query. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sitesMultiscreenSiteNameActivitiesGetAsync($site_name, $limit = null, $offset = null, $from = null, $to = null, $activities = null)
    {
        return $this->sitesMultiscreenSiteNameActivitiesGetAsyncWithHttpInfo($site_name, $limit, $offset, $from, $to, $activities)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sitesMultiscreenSiteNameActivitiesGetAsyncWithHttpInfo
     *
     * Get activity history for a specific website over a certain amount of time.
     *
     * @param  string $site_name Site name (required)
     * @param  int $limit Items to be retrieved per page. Lower bound: 1, Upper bound: 100 (optional)
     * @param  int $offset The index of the first item to return. Must be greater or equal to zero. (optional)
     * @param  string $from Start date (optional)
     * @param  string $to End date (optional)
     * @param  string $activities Activities are the activity types you are looking to retrieve - this parameter can be included multiple times in your query. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sitesMultiscreenSiteNameActivitiesGetAsyncWithHttpInfo($site_name, $limit = null, $offset = null, $from = null, $to = null, $activities = null)
    {
        $returnType = '\OpenAPI\Client\Model\Activity[]';
        $request = $this->sitesMultiscreenSiteNameActivitiesGetRequest($site_name, $limit, $offset, $from, $to, $activities);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sitesMultiscreenSiteNameActivitiesGet'
     *
     * @param  string $site_name Site name (required)
     * @param  int $limit Items to be retrieved per page. Lower bound: 1, Upper bound: 100 (optional)
     * @param  int $offset The index of the first item to return. Must be greater or equal to zero. (optional)
     * @param  string $from Start date (optional)
     * @param  string $to End date (optional)
     * @param  string $activities Activities are the activity types you are looking to retrieve - this parameter can be included multiple times in your query. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function sitesMultiscreenSiteNameActivitiesGetRequest($site_name, $limit = null, $offset = null, $from = null, $to = null, $activities = null)
    {
        // verify the required parameter 'site_name' is set
        if ($site_name === null || (is_array($site_name) && count($site_name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $site_name when calling sitesMultiscreenSiteNameActivitiesGet'
            );
        }

        $resourcePath = '/sites/multiscreen/{site_name}/activities';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($limit !== null) {
            if('form' === 'form' && is_array($limit)) {
                foreach($limit as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['limit'] = $limit;
            }
        }
        // query params
        if ($offset !== null) {
            if('form' === 'form' && is_array($offset)) {
                foreach($offset as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['offset'] = $offset;
            }
        }
        // query params
        if ($from !== null) {
            if('form' === 'form' && is_array($from)) {
                foreach($from as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['from'] = $from;
            }
        }
        // query params
        if ($to !== null) {
            if('form' === 'form' && is_array($to)) {
                foreach($to as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['to'] = $to;
            }
        }
        // query params
        if ($activities !== null) {
            if('form' === 'form' && is_array($activities)) {
                foreach($activities as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['activities'] = $activities;
            }
        }


        // path params
        if ($site_name !== null) {
            $resourcePath = str_replace(
                '{' . 'site_name' . '}',
                ObjectSerializer::toPathValue($site_name),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sitesMultiscreenUnpublishedGet
     *
     * Get a list of recently unpublished websites in your account.
     *
     * @param  string $last_days The number of days in which you would like get sites that have been unpublished (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return string[]|\OpenAPI\Client\Model\Error
     */
    public function sitesMultiscreenUnpublishedGet($last_days = null)
    {
        list($response) = $this->sitesMultiscreenUnpublishedGetWithHttpInfo($last_days);
        return $response;
    }

    /**
     * Operation sitesMultiscreenUnpublishedGetWithHttpInfo
     *
     * Get a list of recently unpublished websites in your account.
     *
     * @param  string $last_days The number of days in which you would like get sites that have been unpublished (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of string[]|\OpenAPI\Client\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function sitesMultiscreenUnpublishedGetWithHttpInfo($last_days = null)
    {
        $request = $this->sitesMultiscreenUnpublishedGetRequest($last_days);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('string[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'string[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                default:
                    if ('\OpenAPI\Client\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'string[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sitesMultiscreenUnpublishedGetAsync
     *
     * Get a list of recently unpublished websites in your account.
     *
     * @param  string $last_days The number of days in which you would like get sites that have been unpublished (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sitesMultiscreenUnpublishedGetAsync($last_days = null)
    {
        return $this->sitesMultiscreenUnpublishedGetAsyncWithHttpInfo($last_days)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sitesMultiscreenUnpublishedGetAsyncWithHttpInfo
     *
     * Get a list of recently unpublished websites in your account.
     *
     * @param  string $last_days The number of days in which you would like get sites that have been unpublished (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sitesMultiscreenUnpublishedGetAsyncWithHttpInfo($last_days = null)
    {
        $returnType = 'string[]';
        $request = $this->sitesMultiscreenUnpublishedGetRequest($last_days);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sitesMultiscreenUnpublishedGet'
     *
     * @param  string $last_days The number of days in which you would like get sites that have been unpublished (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function sitesMultiscreenUnpublishedGetRequest($last_days = null)
    {

        $resourcePath = '/sites/multiscreen/unpublished';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($last_days !== null) {
            if('form' === 'form' && is_array($last_days)) {
                foreach($last_days as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['lastDays'] = $last_days;
            }
        }




        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
