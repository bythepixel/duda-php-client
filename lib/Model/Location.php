<?php
/**
 * Location
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Duda
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.2.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * Location Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class Location implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Location';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'uuid' => 'string',
        'phones' => '\OpenAPI\Client\Model\LocationPhonesInner[]',
        'emails' => '\OpenAPI\Client\Model\LocationEmailsInner[]',
        'label' => 'string',
        'schema' => '\OpenAPI\Client\Model\LocationSchema',
        'social_accounts' => '\OpenAPI\Client\Model\LocationSocialAccounts',
        'address' => '\OpenAPI\Client\Model\LocationAddress',
        'address_geolocation' => 'string',
        'geo' => '\OpenAPI\Client\Model\LocationGeo',
        'logo_url' => 'string',
        'business_hours' => '\OpenAPI\Client\Model\LocationBusinessHoursInner[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'uuid' => null,
        'phones' => null,
        'emails' => null,
        'label' => null,
        'schema' => null,
        'social_accounts' => null,
        'address' => null,
        'address_geolocation' => null,
        'geo' => null,
        'logo_url' => null,
        'business_hours' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'uuid' => false,
		'phones' => false,
		'emails' => false,
		'label' => false,
		'schema' => false,
		'social_accounts' => false,
		'address' => false,
		'address_geolocation' => false,
		'geo' => false,
		'logo_url' => false,
		'business_hours' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'uuid' => 'uuid',
        'phones' => 'phones',
        'emails' => 'emails',
        'label' => 'label',
        'schema' => 'schema',
        'social_accounts' => 'social_accounts',
        'address' => 'address',
        'address_geolocation' => 'address_geolocation',
        'geo' => 'geo',
        'logo_url' => 'logo_url',
        'business_hours' => 'business_hours'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'uuid' => 'setUuid',
        'phones' => 'setPhones',
        'emails' => 'setEmails',
        'label' => 'setLabel',
        'schema' => 'setSchema',
        'social_accounts' => 'setSocialAccounts',
        'address' => 'setAddress',
        'address_geolocation' => 'setAddressGeolocation',
        'geo' => 'setGeo',
        'logo_url' => 'setLogoUrl',
        'business_hours' => 'setBusinessHours'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'uuid' => 'getUuid',
        'phones' => 'getPhones',
        'emails' => 'getEmails',
        'label' => 'getLabel',
        'schema' => 'getSchema',
        'social_accounts' => 'getSocialAccounts',
        'address' => 'getAddress',
        'address_geolocation' => 'getAddressGeolocation',
        'geo' => 'getGeo',
        'logo_url' => 'getLogoUrl',
        'business_hours' => 'getBusinessHours'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('uuid', $data ?? [], null);
        $this->setIfExists('phones', $data ?? [], null);
        $this->setIfExists('emails', $data ?? [], null);
        $this->setIfExists('label', $data ?? [], null);
        $this->setIfExists('schema', $data ?? [], null);
        $this->setIfExists('social_accounts', $data ?? [], null);
        $this->setIfExists('address', $data ?? [], null);
        $this->setIfExists('address_geolocation', $data ?? [], null);
        $this->setIfExists('geo', $data ?? [], null);
        $this->setIfExists('logo_url', $data ?? [], null);
        $this->setIfExists('business_hours', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets uuid
     *
     * @return string|null
     */
    public function getUuid()
    {
        return $this->container['uuid'];
    }

    /**
     * Sets uuid
     *
     * @param string|null $uuid uuid
     *
     * @return self
     */
    public function setUuid($uuid)
    {

        if (is_null($uuid)) {
            throw new \InvalidArgumentException('non-nullable uuid cannot be null');
        }

        $this->container['uuid'] = $uuid;

        return $this;
    }

    /**
     * Gets phones
     *
     * @return \OpenAPI\Client\Model\LocationPhonesInner[]|null
     */
    public function getPhones()
    {
        return $this->container['phones'];
    }

    /**
     * Sets phones
     *
     * @param \OpenAPI\Client\Model\LocationPhonesInner[]|null $phones phones
     *
     * @return self
     */
    public function setPhones($phones)
    {

        if (is_null($phones)) {
            throw new \InvalidArgumentException('non-nullable phones cannot be null');
        }

        $this->container['phones'] = $phones;

        return $this;
    }

    /**
     * Gets emails
     *
     * @return \OpenAPI\Client\Model\LocationEmailsInner[]|null
     */
    public function getEmails()
    {
        return $this->container['emails'];
    }

    /**
     * Sets emails
     *
     * @param \OpenAPI\Client\Model\LocationEmailsInner[]|null $emails emails
     *
     * @return self
     */
    public function setEmails($emails)
    {

        if (is_null($emails)) {
            throw new \InvalidArgumentException('non-nullable emails cannot be null');
        }

        $this->container['emails'] = $emails;

        return $this;
    }

    /**
     * Gets label
     *
     * @return string|null
     */
    public function getLabel()
    {
        return $this->container['label'];
    }

    /**
     * Sets label
     *
     * @param string|null $label label
     *
     * @return self
     */
    public function setLabel($label)
    {

        if (is_null($label)) {
            throw new \InvalidArgumentException('non-nullable label cannot be null');
        }

        $this->container['label'] = $label;

        return $this;
    }

    /**
     * Gets schema
     *
     * @return \OpenAPI\Client\Model\LocationSchema|null
     */
    public function getSchema()
    {
        return $this->container['schema'];
    }

    /**
     * Sets schema
     *
     * @param \OpenAPI\Client\Model\LocationSchema|null $schema schema
     *
     * @return self
     */
    public function setSchema($schema)
    {

        if (is_null($schema)) {
            throw new \InvalidArgumentException('non-nullable schema cannot be null');
        }

        $this->container['schema'] = $schema;

        return $this;
    }

    /**
     * Gets social_accounts
     *
     * @return \OpenAPI\Client\Model\LocationSocialAccounts|null
     */
    public function getSocialAccounts()
    {
        return $this->container['social_accounts'];
    }

    /**
     * Sets social_accounts
     *
     * @param \OpenAPI\Client\Model\LocationSocialAccounts|null $social_accounts social_accounts
     *
     * @return self
     */
    public function setSocialAccounts($social_accounts)
    {

        if (is_null($social_accounts)) {
            throw new \InvalidArgumentException('non-nullable social_accounts cannot be null');
        }

        $this->container['social_accounts'] = $social_accounts;

        return $this;
    }

    /**
     * Gets address
     *
     * @return \OpenAPI\Client\Model\LocationAddress|null
     */
    public function getAddress()
    {
        return $this->container['address'];
    }

    /**
     * Sets address
     *
     * @param \OpenAPI\Client\Model\LocationAddress|null $address address
     *
     * @return self
     */
    public function setAddress($address)
    {

        if (is_null($address)) {
            throw new \InvalidArgumentException('non-nullable address cannot be null');
        }

        $this->container['address'] = $address;

        return $this;
    }

    /**
     * Gets address_geolocation
     *
     * @return string|null
     */
    public function getAddressGeolocation()
    {
        return $this->container['address_geolocation'];
    }

    /**
     * Sets address_geolocation
     *
     * @param string|null $address_geolocation address_geolocation
     *
     * @return self
     */
    public function setAddressGeolocation($address_geolocation)
    {

        if (is_null($address_geolocation)) {
            throw new \InvalidArgumentException('non-nullable address_geolocation cannot be null');
        }

        $this->container['address_geolocation'] = $address_geolocation;

        return $this;
    }

    /**
     * Gets geo
     *
     * @return \OpenAPI\Client\Model\LocationGeo|null
     */
    public function getGeo()
    {
        return $this->container['geo'];
    }

    /**
     * Sets geo
     *
     * @param \OpenAPI\Client\Model\LocationGeo|null $geo geo
     *
     * @return self
     */
    public function setGeo($geo)
    {

        if (is_null($geo)) {
            throw new \InvalidArgumentException('non-nullable geo cannot be null');
        }

        $this->container['geo'] = $geo;

        return $this;
    }

    /**
     * Gets logo_url
     *
     * @return string|null
     */
    public function getLogoUrl()
    {
        return $this->container['logo_url'];
    }

    /**
     * Sets logo_url
     *
     * @param string|null $logo_url logo_url
     *
     * @return self
     */
    public function setLogoUrl($logo_url)
    {

        if (is_null($logo_url)) {
            throw new \InvalidArgumentException('non-nullable logo_url cannot be null');
        }

        $this->container['logo_url'] = $logo_url;

        return $this;
    }

    /**
     * Gets business_hours
     *
     * @return \OpenAPI\Client\Model\LocationBusinessHoursInner[]|null
     */
    public function getBusinessHours()
    {
        return $this->container['business_hours'];
    }

    /**
     * Sets business_hours
     *
     * @param \OpenAPI\Client\Model\LocationBusinessHoursInner[]|null $business_hours business_hours
     *
     * @return self
     */
    public function setBusinessHours($business_hours)
    {

        if (is_null($business_hours)) {
            throw new \InvalidArgumentException('non-nullable business_hours cannot be null');
        }

        $this->container['business_hours'] = $business_hours;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


