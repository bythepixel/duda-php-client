<?php
/**
 * CollectionApi
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Duda
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.4.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use OpenAPI\Client\ApiException;
use OpenAPI\Client\Configuration;
use OpenAPI\Client\HeaderSelector;
use OpenAPI\Client\ObjectSerializer;

/**
 * CollectionApi Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class CollectionApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'clearCache' => [
            'application/json',
        ],
        'clearCacheByExternalId' => [
            'application/json',
        ],
        'createCollection' => [
            'application/json',
        ],
        'createFields' => [
            'application/json',
        ],
        'createRows' => [
            'application/json',
        ],
        'deleteCollection' => [
            'application/json',
        ],
        'deleteFields' => [
            'application/json',
        ],
        'deleteRows' => [
            'application/json',
        ],
        'getCollection' => [
            'application/json',
        ],
        'listCollections' => [
            'application/json',
        ],
        'updateCollection' => [
            'application/json',
        ],
        'updateFields' => [
            'application/json',
        ],
        'updateRows' => [
            'application/json',
        ],
    ];

/**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation clearCache
     *
     * Force Duda to refresh the data from an external URL for a given collection.
     *
     * @param  string $site_name Site name (required)
     * @param  string $collection_name Collection name (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['clearCache'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\Collection|\OpenAPI\Client\Model\Error
     */
    public function clearCache($site_name, $collection_name, string $contentType = self::contentTypes['clearCache'][0])
    {
        list($response) = $this->clearCacheWithHttpInfo($site_name, $collection_name, $contentType);
        return $response;
    }

    /**
     * Operation clearCacheWithHttpInfo
     *
     * Force Duda to refresh the data from an external URL for a given collection.
     *
     * @param  string $site_name Site name (required)
     * @param  string $collection_name Collection name (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['clearCache'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\Collection|\OpenAPI\Client\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function clearCacheWithHttpInfo($site_name, $collection_name, string $contentType = self::contentTypes['clearCache'][0])
    {
        $request = $this->clearCacheRequest($site_name, $collection_name, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\Collection' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\Collection' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\Collection', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                default:
                    if ('\OpenAPI\Client\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\Collection';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\Collection',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation clearCacheAsync
     *
     * Force Duda to refresh the data from an external URL for a given collection.
     *
     * @param  string $site_name Site name (required)
     * @param  string $collection_name Collection name (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['clearCache'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function clearCacheAsync($site_name, $collection_name, string $contentType = self::contentTypes['clearCache'][0])
    {
        return $this->clearCacheAsyncWithHttpInfo($site_name, $collection_name, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation clearCacheAsyncWithHttpInfo
     *
     * Force Duda to refresh the data from an external URL for a given collection.
     *
     * @param  string $site_name Site name (required)
     * @param  string $collection_name Collection name (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['clearCache'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function clearCacheAsyncWithHttpInfo($site_name, $collection_name, string $contentType = self::contentTypes['clearCache'][0])
    {
        $returnType = '\OpenAPI\Client\Model\Collection';
        $request = $this->clearCacheRequest($site_name, $collection_name, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'clearCache'
     *
     * @param  string $site_name Site name (required)
     * @param  string $collection_name Collection name (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['clearCache'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function clearCacheRequest($site_name, $collection_name, string $contentType = self::contentTypes['clearCache'][0])
    {

        // verify the required parameter 'site_name' is set
        if ($site_name === null || (is_array($site_name) && count($site_name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $site_name when calling clearCache'
            );
        }

        // verify the required parameter 'collection_name' is set
        if ($collection_name === null || (is_array($collection_name) && count($collection_name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $collection_name when calling clearCache'
            );
        }


        $resourcePath = '/sites/multiscreen/{site_name}/collection/{collection_name}/revalidate';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($site_name !== null) {
            $resourcePath = str_replace(
                '{' . 'site_name' . '}',
                ObjectSerializer::toPathValue($site_name),
                $resourcePath
            );
        }
        // path params
        if ($collection_name !== null) {
            $resourcePath = str_replace(
                '{' . 'collection_name' . '}',
                ObjectSerializer::toPathValue($collection_name),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation clearCacheByExternalId
     *
     * Revalidate all collections in all sites under the same account that use the provided external id
     *
     * @param  string $external_id The external ID for the collections (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['clearCacheByExternalId'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\Collection|\OpenAPI\Client\Model\Error
     */
    public function clearCacheByExternalId($external_id, string $contentType = self::contentTypes['clearCacheByExternalId'][0])
    {
        list($response) = $this->clearCacheByExternalIdWithHttpInfo($external_id, $contentType);
        return $response;
    }

    /**
     * Operation clearCacheByExternalIdWithHttpInfo
     *
     * Revalidate all collections in all sites under the same account that use the provided external id
     *
     * @param  string $external_id The external ID for the collections (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['clearCacheByExternalId'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\Collection|\OpenAPI\Client\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function clearCacheByExternalIdWithHttpInfo($external_id, string $contentType = self::contentTypes['clearCacheByExternalId'][0])
    {
        $request = $this->clearCacheByExternalIdRequest($external_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\Collection' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\Collection' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\Collection', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                default:
                    if ('\OpenAPI\Client\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\Collection';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\Collection',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation clearCacheByExternalIdAsync
     *
     * Revalidate all collections in all sites under the same account that use the provided external id
     *
     * @param  string $external_id The external ID for the collections (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['clearCacheByExternalId'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function clearCacheByExternalIdAsync($external_id, string $contentType = self::contentTypes['clearCacheByExternalId'][0])
    {
        return $this->clearCacheByExternalIdAsyncWithHttpInfo($external_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation clearCacheByExternalIdAsyncWithHttpInfo
     *
     * Revalidate all collections in all sites under the same account that use the provided external id
     *
     * @param  string $external_id The external ID for the collections (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['clearCacheByExternalId'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function clearCacheByExternalIdAsyncWithHttpInfo($external_id, string $contentType = self::contentTypes['clearCacheByExternalId'][0])
    {
        $returnType = '\OpenAPI\Client\Model\Collection';
        $request = $this->clearCacheByExternalIdRequest($external_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'clearCacheByExternalId'
     *
     * @param  string $external_id The external ID for the collections (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['clearCacheByExternalId'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function clearCacheByExternalIdRequest($external_id, string $contentType = self::contentTypes['clearCacheByExternalId'][0])
    {

        // verify the required parameter 'external_id' is set
        if ($external_id === null || (is_array($external_id) && count($external_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $external_id when calling clearCacheByExternalId'
            );
        }


        $resourcePath = '/sites/multiscreen/collections/revalidate/{external_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($external_id !== null) {
            $resourcePath = str_replace(
                '{' . 'external_id' . '}',
                ObjectSerializer::toPathValue($external_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation createCollection
     *
     * Create a new collection within a site
     *
     * @param  string $site_name Site name (required)
     * @param  \OpenAPI\Client\Model\CollectionCreateRequest $collection_create_request collection_create_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createCollection'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function createCollection($site_name, $collection_create_request = null, string $contentType = self::contentTypes['createCollection'][0])
    {
        $this->createCollectionWithHttpInfo($site_name, $collection_create_request, $contentType);
    }

    /**
     * Operation createCollectionWithHttpInfo
     *
     * Create a new collection within a site
     *
     * @param  string $site_name Site name (required)
     * @param  \OpenAPI\Client\Model\CollectionCreateRequest $collection_create_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createCollection'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function createCollectionWithHttpInfo($site_name, $collection_create_request = null, string $contentType = self::contentTypes['createCollection'][0])
    {
        $request = $this->createCollectionRequest($site_name, $collection_create_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createCollectionAsync
     *
     * Create a new collection within a site
     *
     * @param  string $site_name Site name (required)
     * @param  \OpenAPI\Client\Model\CollectionCreateRequest $collection_create_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createCollection'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createCollectionAsync($site_name, $collection_create_request = null, string $contentType = self::contentTypes['createCollection'][0])
    {
        return $this->createCollectionAsyncWithHttpInfo($site_name, $collection_create_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createCollectionAsyncWithHttpInfo
     *
     * Create a new collection within a site
     *
     * @param  string $site_name Site name (required)
     * @param  \OpenAPI\Client\Model\CollectionCreateRequest $collection_create_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createCollection'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createCollectionAsyncWithHttpInfo($site_name, $collection_create_request = null, string $contentType = self::contentTypes['createCollection'][0])
    {
        $returnType = '';
        $request = $this->createCollectionRequest($site_name, $collection_create_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createCollection'
     *
     * @param  string $site_name Site name (required)
     * @param  \OpenAPI\Client\Model\CollectionCreateRequest $collection_create_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createCollection'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function createCollectionRequest($site_name, $collection_create_request = null, string $contentType = self::contentTypes['createCollection'][0])
    {

        // verify the required parameter 'site_name' is set
        if ($site_name === null || (is_array($site_name) && count($site_name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $site_name when calling createCollection'
            );
        }



        $resourcePath = '/sites/multiscreen/{site_name}/collection';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($site_name !== null) {
            $resourcePath = str_replace(
                '{' . 'site_name' . '}',
                ObjectSerializer::toPathValue($site_name),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($collection_create_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($collection_create_request));
            } else {
                $httpBody = $collection_create_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation createFields
     *
     * Add a new field(s) to an existing collection.
     *
     * @param  string $site_name Site name (required)
     * @param  string $collection_name Collection name (required)
     * @param  \OpenAPI\Client\Model\CreateFieldsRequest $create_fields_request create_fields_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createFields'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function createFields($site_name, $collection_name, $create_fields_request = null, string $contentType = self::contentTypes['createFields'][0])
    {
        $this->createFieldsWithHttpInfo($site_name, $collection_name, $create_fields_request, $contentType);
    }

    /**
     * Operation createFieldsWithHttpInfo
     *
     * Add a new field(s) to an existing collection.
     *
     * @param  string $site_name Site name (required)
     * @param  string $collection_name Collection name (required)
     * @param  \OpenAPI\Client\Model\CreateFieldsRequest $create_fields_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createFields'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function createFieldsWithHttpInfo($site_name, $collection_name, $create_fields_request = null, string $contentType = self::contentTypes['createFields'][0])
    {
        $request = $this->createFieldsRequest($site_name, $collection_name, $create_fields_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createFieldsAsync
     *
     * Add a new field(s) to an existing collection.
     *
     * @param  string $site_name Site name (required)
     * @param  string $collection_name Collection name (required)
     * @param  \OpenAPI\Client\Model\CreateFieldsRequest $create_fields_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createFields'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createFieldsAsync($site_name, $collection_name, $create_fields_request = null, string $contentType = self::contentTypes['createFields'][0])
    {
        return $this->createFieldsAsyncWithHttpInfo($site_name, $collection_name, $create_fields_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createFieldsAsyncWithHttpInfo
     *
     * Add a new field(s) to an existing collection.
     *
     * @param  string $site_name Site name (required)
     * @param  string $collection_name Collection name (required)
     * @param  \OpenAPI\Client\Model\CreateFieldsRequest $create_fields_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createFields'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createFieldsAsyncWithHttpInfo($site_name, $collection_name, $create_fields_request = null, string $contentType = self::contentTypes['createFields'][0])
    {
        $returnType = '';
        $request = $this->createFieldsRequest($site_name, $collection_name, $create_fields_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createFields'
     *
     * @param  string $site_name Site name (required)
     * @param  string $collection_name Collection name (required)
     * @param  \OpenAPI\Client\Model\CreateFieldsRequest $create_fields_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createFields'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function createFieldsRequest($site_name, $collection_name, $create_fields_request = null, string $contentType = self::contentTypes['createFields'][0])
    {

        // verify the required parameter 'site_name' is set
        if ($site_name === null || (is_array($site_name) && count($site_name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $site_name when calling createFields'
            );
        }

        // verify the required parameter 'collection_name' is set
        if ($collection_name === null || (is_array($collection_name) && count($collection_name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $collection_name when calling createFields'
            );
        }



        $resourcePath = '/sites/multiscreen/{site_name}/collection/{collection_name}/field';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($site_name !== null) {
            $resourcePath = str_replace(
                '{' . 'site_name' . '}',
                ObjectSerializer::toPathValue($site_name),
                $resourcePath
            );
        }
        // path params
        if ($collection_name !== null) {
            $resourcePath = str_replace(
                '{' . 'collection_name' . '}',
                ObjectSerializer::toPathValue($collection_name),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($create_fields_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($create_fields_request));
            } else {
                $httpBody = $create_fields_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation createRows
     *
     * Add new row(s) of data into an existing collection. This accepts multiple row values if you&#39;d like to insert more than one.
     *
     * @param  string $site_name Site name (required)
     * @param  string $collection_name Collection name (required)
     * @param  \OpenAPI\Client\Model\CreateRowData[] $create_row_data create_row_data (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createRows'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\RowId[]|\OpenAPI\Client\Model\Error
     */
    public function createRows($site_name, $collection_name, $create_row_data = null, string $contentType = self::contentTypes['createRows'][0])
    {
        list($response) = $this->createRowsWithHttpInfo($site_name, $collection_name, $create_row_data, $contentType);
        return $response;
    }

    /**
     * Operation createRowsWithHttpInfo
     *
     * Add new row(s) of data into an existing collection. This accepts multiple row values if you&#39;d like to insert more than one.
     *
     * @param  string $site_name Site name (required)
     * @param  string $collection_name Collection name (required)
     * @param  \OpenAPI\Client\Model\CreateRowData[] $create_row_data (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createRows'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\RowId[]|\OpenAPI\Client\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function createRowsWithHttpInfo($site_name, $collection_name, $create_row_data = null, string $contentType = self::contentTypes['createRows'][0])
    {
        $request = $this->createRowsRequest($site_name, $collection_name, $create_row_data, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\RowId[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\RowId[]' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\RowId[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                default:
                    if ('\OpenAPI\Client\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\RowId[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\RowId[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createRowsAsync
     *
     * Add new row(s) of data into an existing collection. This accepts multiple row values if you&#39;d like to insert more than one.
     *
     * @param  string $site_name Site name (required)
     * @param  string $collection_name Collection name (required)
     * @param  \OpenAPI\Client\Model\CreateRowData[] $create_row_data (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createRows'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createRowsAsync($site_name, $collection_name, $create_row_data = null, string $contentType = self::contentTypes['createRows'][0])
    {
        return $this->createRowsAsyncWithHttpInfo($site_name, $collection_name, $create_row_data, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createRowsAsyncWithHttpInfo
     *
     * Add new row(s) of data into an existing collection. This accepts multiple row values if you&#39;d like to insert more than one.
     *
     * @param  string $site_name Site name (required)
     * @param  string $collection_name Collection name (required)
     * @param  \OpenAPI\Client\Model\CreateRowData[] $create_row_data (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createRows'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createRowsAsyncWithHttpInfo($site_name, $collection_name, $create_row_data = null, string $contentType = self::contentTypes['createRows'][0])
    {
        $returnType = '\OpenAPI\Client\Model\RowId[]';
        $request = $this->createRowsRequest($site_name, $collection_name, $create_row_data, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createRows'
     *
     * @param  string $site_name Site name (required)
     * @param  string $collection_name Collection name (required)
     * @param  \OpenAPI\Client\Model\CreateRowData[] $create_row_data (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createRows'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function createRowsRequest($site_name, $collection_name, $create_row_data = null, string $contentType = self::contentTypes['createRows'][0])
    {

        // verify the required parameter 'site_name' is set
        if ($site_name === null || (is_array($site_name) && count($site_name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $site_name when calling createRows'
            );
        }

        // verify the required parameter 'collection_name' is set
        if ($collection_name === null || (is_array($collection_name) && count($collection_name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $collection_name when calling createRows'
            );
        }



        $resourcePath = '/sites/multiscreen/{site_name}/collection/{collection_name}/row';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($site_name !== null) {
            $resourcePath = str_replace(
                '{' . 'site_name' . '}',
                ObjectSerializer::toPathValue($site_name),
                $resourcePath
            );
        }
        // path params
        if ($collection_name !== null) {
            $resourcePath = str_replace(
                '{' . 'collection_name' . '}',
                ObjectSerializer::toPathValue($collection_name),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($create_row_data)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($create_row_data));
            } else {
                $httpBody = $create_row_data;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteCollection
     *
     * Delete an existing collection
     *
     * @param  string $site_name Site name (required)
     * @param  string $collection_name Collection name (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteCollection'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function deleteCollection($site_name, $collection_name, string $contentType = self::contentTypes['deleteCollection'][0])
    {
        $this->deleteCollectionWithHttpInfo($site_name, $collection_name, $contentType);
    }

    /**
     * Operation deleteCollectionWithHttpInfo
     *
     * Delete an existing collection
     *
     * @param  string $site_name Site name (required)
     * @param  string $collection_name Collection name (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteCollection'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteCollectionWithHttpInfo($site_name, $collection_name, string $contentType = self::contentTypes['deleteCollection'][0])
    {
        $request = $this->deleteCollectionRequest($site_name, $collection_name, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation deleteCollectionAsync
     *
     * Delete an existing collection
     *
     * @param  string $site_name Site name (required)
     * @param  string $collection_name Collection name (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteCollection'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteCollectionAsync($site_name, $collection_name, string $contentType = self::contentTypes['deleteCollection'][0])
    {
        return $this->deleteCollectionAsyncWithHttpInfo($site_name, $collection_name, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteCollectionAsyncWithHttpInfo
     *
     * Delete an existing collection
     *
     * @param  string $site_name Site name (required)
     * @param  string $collection_name Collection name (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteCollection'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteCollectionAsyncWithHttpInfo($site_name, $collection_name, string $contentType = self::contentTypes['deleteCollection'][0])
    {
        $returnType = '';
        $request = $this->deleteCollectionRequest($site_name, $collection_name, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteCollection'
     *
     * @param  string $site_name Site name (required)
     * @param  string $collection_name Collection name (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteCollection'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function deleteCollectionRequest($site_name, $collection_name, string $contentType = self::contentTypes['deleteCollection'][0])
    {

        // verify the required parameter 'site_name' is set
        if ($site_name === null || (is_array($site_name) && count($site_name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $site_name when calling deleteCollection'
            );
        }

        // verify the required parameter 'collection_name' is set
        if ($collection_name === null || (is_array($collection_name) && count($collection_name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $collection_name when calling deleteCollection'
            );
        }


        $resourcePath = '/sites/multiscreen/{site_name}/collection/{collection_name}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($site_name !== null) {
            $resourcePath = str_replace(
                '{' . 'site_name' . '}',
                ObjectSerializer::toPathValue($site_name),
                $resourcePath
            );
        }
        // path params
        if ($collection_name !== null) {
            $resourcePath = str_replace(
                '{' . 'collection_name' . '}',
                ObjectSerializer::toPathValue($collection_name),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteFields
     *
     * Delete an existing field of a collection
     *
     * @param  string $site_name Site name (required)
     * @param  string $collection_name Collection name (required)
     * @param  string $field_name Name of the field in the collection. (must not start with $) (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteFields'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function deleteFields($site_name, $collection_name, $field_name, string $contentType = self::contentTypes['deleteFields'][0])
    {
        $this->deleteFieldsWithHttpInfo($site_name, $collection_name, $field_name, $contentType);
    }

    /**
     * Operation deleteFieldsWithHttpInfo
     *
     * Delete an existing field of a collection
     *
     * @param  string $site_name Site name (required)
     * @param  string $collection_name Collection name (required)
     * @param  string $field_name Name of the field in the collection. (must not start with $) (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteFields'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteFieldsWithHttpInfo($site_name, $collection_name, $field_name, string $contentType = self::contentTypes['deleteFields'][0])
    {
        $request = $this->deleteFieldsRequest($site_name, $collection_name, $field_name, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation deleteFieldsAsync
     *
     * Delete an existing field of a collection
     *
     * @param  string $site_name Site name (required)
     * @param  string $collection_name Collection name (required)
     * @param  string $field_name Name of the field in the collection. (must not start with $) (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteFields'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteFieldsAsync($site_name, $collection_name, $field_name, string $contentType = self::contentTypes['deleteFields'][0])
    {
        return $this->deleteFieldsAsyncWithHttpInfo($site_name, $collection_name, $field_name, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteFieldsAsyncWithHttpInfo
     *
     * Delete an existing field of a collection
     *
     * @param  string $site_name Site name (required)
     * @param  string $collection_name Collection name (required)
     * @param  string $field_name Name of the field in the collection. (must not start with $) (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteFields'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteFieldsAsyncWithHttpInfo($site_name, $collection_name, $field_name, string $contentType = self::contentTypes['deleteFields'][0])
    {
        $returnType = '';
        $request = $this->deleteFieldsRequest($site_name, $collection_name, $field_name, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteFields'
     *
     * @param  string $site_name Site name (required)
     * @param  string $collection_name Collection name (required)
     * @param  string $field_name Name of the field in the collection. (must not start with $) (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteFields'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function deleteFieldsRequest($site_name, $collection_name, $field_name, string $contentType = self::contentTypes['deleteFields'][0])
    {

        // verify the required parameter 'site_name' is set
        if ($site_name === null || (is_array($site_name) && count($site_name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $site_name when calling deleteFields'
            );
        }

        // verify the required parameter 'collection_name' is set
        if ($collection_name === null || (is_array($collection_name) && count($collection_name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $collection_name when calling deleteFields'
            );
        }

        // verify the required parameter 'field_name' is set
        if ($field_name === null || (is_array($field_name) && count($field_name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $field_name when calling deleteFields'
            );
        }


        $resourcePath = '/sites/multiscreen/{site_name}/collection/{collection_name}/field/{field_name}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($site_name !== null) {
            $resourcePath = str_replace(
                '{' . 'site_name' . '}',
                ObjectSerializer::toPathValue($site_name),
                $resourcePath
            );
        }
        // path params
        if ($collection_name !== null) {
            $resourcePath = str_replace(
                '{' . 'collection_name' . '}',
                ObjectSerializer::toPathValue($collection_name),
                $resourcePath
            );
        }
        // path params
        if ($field_name !== null) {
            $resourcePath = str_replace(
                '{' . 'field_name' . '}',
                ObjectSerializer::toPathValue($field_name),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteRows
     *
     * Delete existing rows of data that exist within the collection.
     *
     * @param  string $site_name Site name (required)
     * @param  string $collection_name Collection name (required)
     * @param  string[] $request_body request_body (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteRows'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function deleteRows($site_name, $collection_name, $request_body = null, string $contentType = self::contentTypes['deleteRows'][0])
    {
        $this->deleteRowsWithHttpInfo($site_name, $collection_name, $request_body, $contentType);
    }

    /**
     * Operation deleteRowsWithHttpInfo
     *
     * Delete existing rows of data that exist within the collection.
     *
     * @param  string $site_name Site name (required)
     * @param  string $collection_name Collection name (required)
     * @param  string[] $request_body (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteRows'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteRowsWithHttpInfo($site_name, $collection_name, $request_body = null, string $contentType = self::contentTypes['deleteRows'][0])
    {
        $request = $this->deleteRowsRequest($site_name, $collection_name, $request_body, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation deleteRowsAsync
     *
     * Delete existing rows of data that exist within the collection.
     *
     * @param  string $site_name Site name (required)
     * @param  string $collection_name Collection name (required)
     * @param  string[] $request_body (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteRows'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteRowsAsync($site_name, $collection_name, $request_body = null, string $contentType = self::contentTypes['deleteRows'][0])
    {
        return $this->deleteRowsAsyncWithHttpInfo($site_name, $collection_name, $request_body, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteRowsAsyncWithHttpInfo
     *
     * Delete existing rows of data that exist within the collection.
     *
     * @param  string $site_name Site name (required)
     * @param  string $collection_name Collection name (required)
     * @param  string[] $request_body (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteRows'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteRowsAsyncWithHttpInfo($site_name, $collection_name, $request_body = null, string $contentType = self::contentTypes['deleteRows'][0])
    {
        $returnType = '';
        $request = $this->deleteRowsRequest($site_name, $collection_name, $request_body, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteRows'
     *
     * @param  string $site_name Site name (required)
     * @param  string $collection_name Collection name (required)
     * @param  string[] $request_body (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteRows'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function deleteRowsRequest($site_name, $collection_name, $request_body = null, string $contentType = self::contentTypes['deleteRows'][0])
    {

        // verify the required parameter 'site_name' is set
        if ($site_name === null || (is_array($site_name) && count($site_name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $site_name when calling deleteRows'
            );
        }

        // verify the required parameter 'collection_name' is set
        if ($collection_name === null || (is_array($collection_name) && count($collection_name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $collection_name when calling deleteRows'
            );
        }



        $resourcePath = '/sites/multiscreen/{site_name}/collection/{collection_name}/row';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($site_name !== null) {
            $resourcePath = str_replace(
                '{' . 'site_name' . '}',
                ObjectSerializer::toPathValue($site_name),
                $resourcePath
            );
        }
        // path params
        if ($collection_name !== null) {
            $resourcePath = str_replace(
                '{' . 'collection_name' . '}',
                ObjectSerializer::toPathValue($collection_name),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($request_body)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($request_body));
            } else {
                $httpBody = $request_body;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getCollection
     *
     * Get the fields and data of an existing collection
     *
     * @param  string $site_name Site name (required)
     * @param  string $collection_name Collection name (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCollection'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\Collection|\OpenAPI\Client\Model\Error
     */
    public function getCollection($site_name, $collection_name, string $contentType = self::contentTypes['getCollection'][0])
    {
        list($response) = $this->getCollectionWithHttpInfo($site_name, $collection_name, $contentType);
        return $response;
    }

    /**
     * Operation getCollectionWithHttpInfo
     *
     * Get the fields and data of an existing collection
     *
     * @param  string $site_name Site name (required)
     * @param  string $collection_name Collection name (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCollection'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\Collection|\OpenAPI\Client\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function getCollectionWithHttpInfo($site_name, $collection_name, string $contentType = self::contentTypes['getCollection'][0])
    {
        $request = $this->getCollectionRequest($site_name, $collection_name, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\Collection' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\Collection' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\Collection', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                default:
                    if ('\OpenAPI\Client\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\Collection';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\Collection',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getCollectionAsync
     *
     * Get the fields and data of an existing collection
     *
     * @param  string $site_name Site name (required)
     * @param  string $collection_name Collection name (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCollection'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCollectionAsync($site_name, $collection_name, string $contentType = self::contentTypes['getCollection'][0])
    {
        return $this->getCollectionAsyncWithHttpInfo($site_name, $collection_name, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getCollectionAsyncWithHttpInfo
     *
     * Get the fields and data of an existing collection
     *
     * @param  string $site_name Site name (required)
     * @param  string $collection_name Collection name (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCollection'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCollectionAsyncWithHttpInfo($site_name, $collection_name, string $contentType = self::contentTypes['getCollection'][0])
    {
        $returnType = '\OpenAPI\Client\Model\Collection';
        $request = $this->getCollectionRequest($site_name, $collection_name, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getCollection'
     *
     * @param  string $site_name Site name (required)
     * @param  string $collection_name Collection name (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCollection'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getCollectionRequest($site_name, $collection_name, string $contentType = self::contentTypes['getCollection'][0])
    {

        // verify the required parameter 'site_name' is set
        if ($site_name === null || (is_array($site_name) && count($site_name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $site_name when calling getCollection'
            );
        }

        // verify the required parameter 'collection_name' is set
        if ($collection_name === null || (is_array($collection_name) && count($collection_name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $collection_name when calling getCollection'
            );
        }


        $resourcePath = '/sites/multiscreen/{site_name}/collection/{collection_name}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($site_name !== null) {
            $resourcePath = str_replace(
                '{' . 'site_name' . '}',
                ObjectSerializer::toPathValue($site_name),
                $resourcePath
            );
        }
        // path params
        if ($collection_name !== null) {
            $resourcePath = str_replace(
                '{' . 'collection_name' . '}',
                ObjectSerializer::toPathValue($collection_name),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation listCollections
     *
     * Get all collections that exist on this website.
     *
     * @param  string $site_name Site name (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listCollections'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\Collection[]|\OpenAPI\Client\Model\Error
     */
    public function listCollections($site_name, string $contentType = self::contentTypes['listCollections'][0])
    {
        list($response) = $this->listCollectionsWithHttpInfo($site_name, $contentType);
        return $response;
    }

    /**
     * Operation listCollectionsWithHttpInfo
     *
     * Get all collections that exist on this website.
     *
     * @param  string $site_name Site name (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listCollections'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\Collection[]|\OpenAPI\Client\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function listCollectionsWithHttpInfo($site_name, string $contentType = self::contentTypes['listCollections'][0])
    {
        $request = $this->listCollectionsRequest($site_name, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\Collection[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\Collection[]' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\Collection[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                default:
                    if ('\OpenAPI\Client\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\Collection[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\Collection[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation listCollectionsAsync
     *
     * Get all collections that exist on this website.
     *
     * @param  string $site_name Site name (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listCollections'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listCollectionsAsync($site_name, string $contentType = self::contentTypes['listCollections'][0])
    {
        return $this->listCollectionsAsyncWithHttpInfo($site_name, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation listCollectionsAsyncWithHttpInfo
     *
     * Get all collections that exist on this website.
     *
     * @param  string $site_name Site name (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listCollections'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listCollectionsAsyncWithHttpInfo($site_name, string $contentType = self::contentTypes['listCollections'][0])
    {
        $returnType = '\OpenAPI\Client\Model\Collection[]';
        $request = $this->listCollectionsRequest($site_name, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'listCollections'
     *
     * @param  string $site_name Site name (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listCollections'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function listCollectionsRequest($site_name, string $contentType = self::contentTypes['listCollections'][0])
    {

        // verify the required parameter 'site_name' is set
        if ($site_name === null || (is_array($site_name) && count($site_name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $site_name when calling listCollections'
            );
        }


        $resourcePath = '/sites/multiscreen/{site_name}/collection';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($site_name !== null) {
            $resourcePath = str_replace(
                '{' . 'site_name' . '}',
                ObjectSerializer::toPathValue($site_name),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateCollection
     *
     * Update an existing collection
     *
     * @param  string $site_name Site name (required)
     * @param  string $collection_name Collection name (required)
     * @param  \OpenAPI\Client\Model\CollectionUpdateRequest $collection_update_request collection_update_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateCollection'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function updateCollection($site_name, $collection_name, $collection_update_request = null, string $contentType = self::contentTypes['updateCollection'][0])
    {
        $this->updateCollectionWithHttpInfo($site_name, $collection_name, $collection_update_request, $contentType);
    }

    /**
     * Operation updateCollectionWithHttpInfo
     *
     * Update an existing collection
     *
     * @param  string $site_name Site name (required)
     * @param  string $collection_name Collection name (required)
     * @param  \OpenAPI\Client\Model\CollectionUpdateRequest $collection_update_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateCollection'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateCollectionWithHttpInfo($site_name, $collection_name, $collection_update_request = null, string $contentType = self::contentTypes['updateCollection'][0])
    {
        $request = $this->updateCollectionRequest($site_name, $collection_name, $collection_update_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateCollectionAsync
     *
     * Update an existing collection
     *
     * @param  string $site_name Site name (required)
     * @param  string $collection_name Collection name (required)
     * @param  \OpenAPI\Client\Model\CollectionUpdateRequest $collection_update_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateCollection'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateCollectionAsync($site_name, $collection_name, $collection_update_request = null, string $contentType = self::contentTypes['updateCollection'][0])
    {
        return $this->updateCollectionAsyncWithHttpInfo($site_name, $collection_name, $collection_update_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateCollectionAsyncWithHttpInfo
     *
     * Update an existing collection
     *
     * @param  string $site_name Site name (required)
     * @param  string $collection_name Collection name (required)
     * @param  \OpenAPI\Client\Model\CollectionUpdateRequest $collection_update_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateCollection'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateCollectionAsyncWithHttpInfo($site_name, $collection_name, $collection_update_request = null, string $contentType = self::contentTypes['updateCollection'][0])
    {
        $returnType = '';
        $request = $this->updateCollectionRequest($site_name, $collection_name, $collection_update_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateCollection'
     *
     * @param  string $site_name Site name (required)
     * @param  string $collection_name Collection name (required)
     * @param  \OpenAPI\Client\Model\CollectionUpdateRequest $collection_update_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateCollection'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function updateCollectionRequest($site_name, $collection_name, $collection_update_request = null, string $contentType = self::contentTypes['updateCollection'][0])
    {

        // verify the required parameter 'site_name' is set
        if ($site_name === null || (is_array($site_name) && count($site_name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $site_name when calling updateCollection'
            );
        }

        // verify the required parameter 'collection_name' is set
        if ($collection_name === null || (is_array($collection_name) && count($collection_name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $collection_name when calling updateCollection'
            );
        }



        $resourcePath = '/sites/multiscreen/{site_name}/collection/{collection_name}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($site_name !== null) {
            $resourcePath = str_replace(
                '{' . 'site_name' . '}',
                ObjectSerializer::toPathValue($site_name),
                $resourcePath
            );
        }
        // path params
        if ($collection_name !== null) {
            $resourcePath = str_replace(
                '{' . 'collection_name' . '}',
                ObjectSerializer::toPathValue($collection_name),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($collection_update_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($collection_update_request));
            } else {
                $httpBody = $collection_update_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateFields
     *
     * Update existing field of a collection
     *
     * @param  string $site_name Site name (required)
     * @param  string $collection_name Collection name (required)
     * @param  string $field_name Name of the field in the collection. (must not start with $) (required)
     * @param  \OpenAPI\Client\Model\UpdateFieldsRequest $update_fields_request update_fields_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateFields'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function updateFields($site_name, $collection_name, $field_name, $update_fields_request = null, string $contentType = self::contentTypes['updateFields'][0])
    {
        $this->updateFieldsWithHttpInfo($site_name, $collection_name, $field_name, $update_fields_request, $contentType);
    }

    /**
     * Operation updateFieldsWithHttpInfo
     *
     * Update existing field of a collection
     *
     * @param  string $site_name Site name (required)
     * @param  string $collection_name Collection name (required)
     * @param  string $field_name Name of the field in the collection. (must not start with $) (required)
     * @param  \OpenAPI\Client\Model\UpdateFieldsRequest $update_fields_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateFields'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateFieldsWithHttpInfo($site_name, $collection_name, $field_name, $update_fields_request = null, string $contentType = self::contentTypes['updateFields'][0])
    {
        $request = $this->updateFieldsRequest($site_name, $collection_name, $field_name, $update_fields_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateFieldsAsync
     *
     * Update existing field of a collection
     *
     * @param  string $site_name Site name (required)
     * @param  string $collection_name Collection name (required)
     * @param  string $field_name Name of the field in the collection. (must not start with $) (required)
     * @param  \OpenAPI\Client\Model\UpdateFieldsRequest $update_fields_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateFields'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateFieldsAsync($site_name, $collection_name, $field_name, $update_fields_request = null, string $contentType = self::contentTypes['updateFields'][0])
    {
        return $this->updateFieldsAsyncWithHttpInfo($site_name, $collection_name, $field_name, $update_fields_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateFieldsAsyncWithHttpInfo
     *
     * Update existing field of a collection
     *
     * @param  string $site_name Site name (required)
     * @param  string $collection_name Collection name (required)
     * @param  string $field_name Name of the field in the collection. (must not start with $) (required)
     * @param  \OpenAPI\Client\Model\UpdateFieldsRequest $update_fields_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateFields'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateFieldsAsyncWithHttpInfo($site_name, $collection_name, $field_name, $update_fields_request = null, string $contentType = self::contentTypes['updateFields'][0])
    {
        $returnType = '';
        $request = $this->updateFieldsRequest($site_name, $collection_name, $field_name, $update_fields_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateFields'
     *
     * @param  string $site_name Site name (required)
     * @param  string $collection_name Collection name (required)
     * @param  string $field_name Name of the field in the collection. (must not start with $) (required)
     * @param  \OpenAPI\Client\Model\UpdateFieldsRequest $update_fields_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateFields'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function updateFieldsRequest($site_name, $collection_name, $field_name, $update_fields_request = null, string $contentType = self::contentTypes['updateFields'][0])
    {

        // verify the required parameter 'site_name' is set
        if ($site_name === null || (is_array($site_name) && count($site_name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $site_name when calling updateFields'
            );
        }

        // verify the required parameter 'collection_name' is set
        if ($collection_name === null || (is_array($collection_name) && count($collection_name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $collection_name when calling updateFields'
            );
        }

        // verify the required parameter 'field_name' is set
        if ($field_name === null || (is_array($field_name) && count($field_name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $field_name when calling updateFields'
            );
        }



        $resourcePath = '/sites/multiscreen/{site_name}/collection/{collection_name}/field/{field_name}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($site_name !== null) {
            $resourcePath = str_replace(
                '{' . 'site_name' . '}',
                ObjectSerializer::toPathValue($site_name),
                $resourcePath
            );
        }
        // path params
        if ($collection_name !== null) {
            $resourcePath = str_replace(
                '{' . 'collection_name' . '}',
                ObjectSerializer::toPathValue($collection_name),
                $resourcePath
            );
        }
        // path params
        if ($field_name !== null) {
            $resourcePath = str_replace(
                '{' . 'field_name' . '}',
                ObjectSerializer::toPathValue($field_name),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($update_fields_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($update_fields_request));
            } else {
                $httpBody = $update_fields_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateRows
     *
     * Update existing collection rows.
     *
     * @param  string $site_name Site name (required)
     * @param  string $collection_name Collection name (required)
     * @param  \OpenAPI\Client\Model\RowData[] $row_data row_data (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateRows'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function updateRows($site_name, $collection_name, $row_data = null, string $contentType = self::contentTypes['updateRows'][0])
    {
        $this->updateRowsWithHttpInfo($site_name, $collection_name, $row_data, $contentType);
    }

    /**
     * Operation updateRowsWithHttpInfo
     *
     * Update existing collection rows.
     *
     * @param  string $site_name Site name (required)
     * @param  string $collection_name Collection name (required)
     * @param  \OpenAPI\Client\Model\RowData[] $row_data (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateRows'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateRowsWithHttpInfo($site_name, $collection_name, $row_data = null, string $contentType = self::contentTypes['updateRows'][0])
    {
        $request = $this->updateRowsRequest($site_name, $collection_name, $row_data, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateRowsAsync
     *
     * Update existing collection rows.
     *
     * @param  string $site_name Site name (required)
     * @param  string $collection_name Collection name (required)
     * @param  \OpenAPI\Client\Model\RowData[] $row_data (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateRows'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateRowsAsync($site_name, $collection_name, $row_data = null, string $contentType = self::contentTypes['updateRows'][0])
    {
        return $this->updateRowsAsyncWithHttpInfo($site_name, $collection_name, $row_data, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateRowsAsyncWithHttpInfo
     *
     * Update existing collection rows.
     *
     * @param  string $site_name Site name (required)
     * @param  string $collection_name Collection name (required)
     * @param  \OpenAPI\Client\Model\RowData[] $row_data (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateRows'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateRowsAsyncWithHttpInfo($site_name, $collection_name, $row_data = null, string $contentType = self::contentTypes['updateRows'][0])
    {
        $returnType = '';
        $request = $this->updateRowsRequest($site_name, $collection_name, $row_data, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateRows'
     *
     * @param  string $site_name Site name (required)
     * @param  string $collection_name Collection name (required)
     * @param  \OpenAPI\Client\Model\RowData[] $row_data (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateRows'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function updateRowsRequest($site_name, $collection_name, $row_data = null, string $contentType = self::contentTypes['updateRows'][0])
    {

        // verify the required parameter 'site_name' is set
        if ($site_name === null || (is_array($site_name) && count($site_name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $site_name when calling updateRows'
            );
        }

        // verify the required parameter 'collection_name' is set
        if ($collection_name === null || (is_array($collection_name) && count($collection_name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $collection_name when calling updateRows'
            );
        }



        $resourcePath = '/sites/multiscreen/{site_name}/collection/{collection_name}/row';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($site_name !== null) {
            $resourcePath = str_replace(
                '{' . 'site_name' . '}',
                ObjectSerializer::toPathValue($site_name),
                $resourcePath
            );
        }
        // path params
        if ($collection_name !== null) {
            $resourcePath = str_replace(
                '{' . 'collection_name' . '}',
                ObjectSerializer::toPathValue($collection_name),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($row_data)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($row_data));
            } else {
                $httpBody = $row_data;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
