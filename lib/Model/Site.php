<?php
/**
 * Site
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Duda
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.4.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * Site Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class Site implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Site';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'template_id' => 'int',
        'account_name' => 'string',
        'external_uid' => 'string',
        'site_domain' => 'string',
        'lang' => 'string',
        'site_business_info' => '\OpenAPI\Client\Model\SiteBusinessInfo',
        'site_alternate_domains' => '\OpenAPI\Client\Model\AlternateDomains',
        'site_seo' => '\OpenAPI\Client\Model\Seo',
        'schemas' => '\OpenAPI\Client\Model\SiteSchemas',
        'site_default_domain' => 'string',
        'preview_site_url' => 'string',
        'last_published_date' => 'string',
        'first_published_date' => 'string',
        'force_https' => 'string',
        'last_reset_by' => 'string',
        'certificate_status' => 'string',
        'modification_date' => 'string',
        'creation_date' => 'string',
        'publish_status' => 'string',
        'thumbnail_url' => 'string',
        'store_status' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'template_id' => null,
        'account_name' => null,
        'external_uid' => null,
        'site_domain' => null,
        'lang' => null,
        'site_business_info' => null,
        'site_alternate_domains' => null,
        'site_seo' => null,
        'schemas' => null,
        'site_default_domain' => null,
        'preview_site_url' => null,
        'last_published_date' => null,
        'first_published_date' => null,
        'force_https' => null,
        'last_reset_by' => null,
        'certificate_status' => null,
        'modification_date' => null,
        'creation_date' => null,
        'publish_status' => null,
        'thumbnail_url' => null,
        'store_status' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'template_id' => false,
		'account_name' => false,
		'external_uid' => false,
		'site_domain' => false,
		'lang' => false,
		'site_business_info' => false,
		'site_alternate_domains' => false,
		'site_seo' => false,
		'schemas' => false,
		'site_default_domain' => false,
		'preview_site_url' => false,
		'last_published_date' => false,
		'first_published_date' => false,
		'force_https' => false,
		'last_reset_by' => false,
		'certificate_status' => false,
		'modification_date' => false,
		'creation_date' => false,
		'publish_status' => false,
		'thumbnail_url' => false,
		'store_status' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'template_id' => 'template_id',
        'account_name' => 'account_name',
        'external_uid' => 'external_uid',
        'site_domain' => 'site_domain',
        'lang' => 'lang',
        'site_business_info' => 'site_business_info',
        'site_alternate_domains' => 'site_alternate_domains',
        'site_seo' => 'site_seo',
        'schemas' => 'schemas',
        'site_default_domain' => 'site_default_domain',
        'preview_site_url' => 'preview_site_url',
        'last_published_date' => 'last_published_date',
        'first_published_date' => 'first_published_date',
        'force_https' => 'force_https',
        'last_reset_by' => 'last_reset_by',
        'certificate_status' => 'certificate_status',
        'modification_date' => 'modification_date',
        'creation_date' => 'creation_date',
        'publish_status' => 'publish_status',
        'thumbnail_url' => 'thumbnail_url',
        'store_status' => 'store_status'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'template_id' => 'setTemplateId',
        'account_name' => 'setAccountName',
        'external_uid' => 'setExternalUid',
        'site_domain' => 'setSiteDomain',
        'lang' => 'setLang',
        'site_business_info' => 'setSiteBusinessInfo',
        'site_alternate_domains' => 'setSiteAlternateDomains',
        'site_seo' => 'setSiteSeo',
        'schemas' => 'setSchemas',
        'site_default_domain' => 'setSiteDefaultDomain',
        'preview_site_url' => 'setPreviewSiteUrl',
        'last_published_date' => 'setLastPublishedDate',
        'first_published_date' => 'setFirstPublishedDate',
        'force_https' => 'setForceHttps',
        'last_reset_by' => 'setLastResetBy',
        'certificate_status' => 'setCertificateStatus',
        'modification_date' => 'setModificationDate',
        'creation_date' => 'setCreationDate',
        'publish_status' => 'setPublishStatus',
        'thumbnail_url' => 'setThumbnailUrl',
        'store_status' => 'setStoreStatus'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'template_id' => 'getTemplateId',
        'account_name' => 'getAccountName',
        'external_uid' => 'getExternalUid',
        'site_domain' => 'getSiteDomain',
        'lang' => 'getLang',
        'site_business_info' => 'getSiteBusinessInfo',
        'site_alternate_domains' => 'getSiteAlternateDomains',
        'site_seo' => 'getSiteSeo',
        'schemas' => 'getSchemas',
        'site_default_domain' => 'getSiteDefaultDomain',
        'preview_site_url' => 'getPreviewSiteUrl',
        'last_published_date' => 'getLastPublishedDate',
        'first_published_date' => 'getFirstPublishedDate',
        'force_https' => 'getForceHttps',
        'last_reset_by' => 'getLastResetBy',
        'certificate_status' => 'getCertificateStatus',
        'modification_date' => 'getModificationDate',
        'creation_date' => 'getCreationDate',
        'publish_status' => 'getPublishStatus',
        'thumbnail_url' => 'getThumbnailUrl',
        'store_status' => 'getStoreStatus'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('template_id', $data ?? [], null);
        $this->setIfExists('account_name', $data ?? [], null);
        $this->setIfExists('external_uid', $data ?? [], null);
        $this->setIfExists('site_domain', $data ?? [], null);
        $this->setIfExists('lang', $data ?? [], null);
        $this->setIfExists('site_business_info', $data ?? [], null);
        $this->setIfExists('site_alternate_domains', $data ?? [], null);
        $this->setIfExists('site_seo', $data ?? [], null);
        $this->setIfExists('schemas', $data ?? [], null);
        $this->setIfExists('site_default_domain', $data ?? [], null);
        $this->setIfExists('preview_site_url', $data ?? [], null);
        $this->setIfExists('last_published_date', $data ?? [], null);
        $this->setIfExists('first_published_date', $data ?? [], null);
        $this->setIfExists('force_https', $data ?? [], null);
        $this->setIfExists('last_reset_by', $data ?? [], null);
        $this->setIfExists('certificate_status', $data ?? [], null);
        $this->setIfExists('modification_date', $data ?? [], null);
        $this->setIfExists('creation_date', $data ?? [], null);
        $this->setIfExists('publish_status', $data ?? [], null);
        $this->setIfExists('thumbnail_url', $data ?? [], null);
        $this->setIfExists('store_status', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets template_id
     *
     * @return int|null
     */
    public function getTemplateId()
    {
        return $this->container['template_id'];
    }

    /**
     * Sets template_id
     *
     * @param int|null $template_id template_id
     *
     * @return self
     */
    public function setTemplateId($template_id)
    {
        if (is_null($template_id)) {
            throw new \InvalidArgumentException('non-nullable template_id cannot be null');
        }
        $this->container['template_id'] = $template_id;

        return $this;
    }

    /**
     * Gets account_name
     *
     * @return string|null
     */
    public function getAccountName()
    {
        return $this->container['account_name'];
    }

    /**
     * Sets account_name
     *
     * @param string|null $account_name account_name
     *
     * @return self
     */
    public function setAccountName($account_name)
    {
        if (is_null($account_name)) {
            throw new \InvalidArgumentException('non-nullable account_name cannot be null');
        }
        $this->container['account_name'] = $account_name;

        return $this;
    }

    /**
     * Gets external_uid
     *
     * @return string|null
     */
    public function getExternalUid()
    {
        return $this->container['external_uid'];
    }

    /**
     * Sets external_uid
     *
     * @param string|null $external_uid external_uid
     *
     * @return self
     */
    public function setExternalUid($external_uid)
    {
        if (is_null($external_uid)) {
            throw new \InvalidArgumentException('non-nullable external_uid cannot be null');
        }
        $this->container['external_uid'] = $external_uid;

        return $this;
    }

    /**
     * Gets site_domain
     *
     * @return string|null
     */
    public function getSiteDomain()
    {
        return $this->container['site_domain'];
    }

    /**
     * Sets site_domain
     *
     * @param string|null $site_domain site_domain
     *
     * @return self
     */
    public function setSiteDomain($site_domain)
    {
        if (is_null($site_domain)) {
            throw new \InvalidArgumentException('non-nullable site_domain cannot be null');
        }
        $this->container['site_domain'] = $site_domain;

        return $this;
    }

    /**
     * Gets lang
     *
     * @return string|null
     */
    public function getLang()
    {
        return $this->container['lang'];
    }

    /**
     * Sets lang
     *
     * @param string|null $lang lang
     *
     * @return self
     */
    public function setLang($lang)
    {
        if (is_null($lang)) {
            throw new \InvalidArgumentException('non-nullable lang cannot be null');
        }
        $this->container['lang'] = $lang;

        return $this;
    }

    /**
     * Gets site_business_info
     *
     * @return \OpenAPI\Client\Model\SiteBusinessInfo|null
     */
    public function getSiteBusinessInfo()
    {
        return $this->container['site_business_info'];
    }

    /**
     * Sets site_business_info
     *
     * @param \OpenAPI\Client\Model\SiteBusinessInfo|null $site_business_info site_business_info
     *
     * @return self
     */
    public function setSiteBusinessInfo($site_business_info)
    {
        if (is_null($site_business_info)) {
            throw new \InvalidArgumentException('non-nullable site_business_info cannot be null');
        }
        $this->container['site_business_info'] = $site_business_info;

        return $this;
    }

    /**
     * Gets site_alternate_domains
     *
     * @return \OpenAPI\Client\Model\AlternateDomains|null
     */
    public function getSiteAlternateDomains()
    {
        return $this->container['site_alternate_domains'];
    }

    /**
     * Sets site_alternate_domains
     *
     * @param \OpenAPI\Client\Model\AlternateDomains|null $site_alternate_domains site_alternate_domains
     *
     * @return self
     */
    public function setSiteAlternateDomains($site_alternate_domains)
    {
        if (is_null($site_alternate_domains)) {
            throw new \InvalidArgumentException('non-nullable site_alternate_domains cannot be null');
        }
        $this->container['site_alternate_domains'] = $site_alternate_domains;

        return $this;
    }

    /**
     * Gets site_seo
     *
     * @return \OpenAPI\Client\Model\Seo|null
     */
    public function getSiteSeo()
    {
        return $this->container['site_seo'];
    }

    /**
     * Sets site_seo
     *
     * @param \OpenAPI\Client\Model\Seo|null $site_seo site_seo
     *
     * @return self
     */
    public function setSiteSeo($site_seo)
    {
        if (is_null($site_seo)) {
            throw new \InvalidArgumentException('non-nullable site_seo cannot be null');
        }
        $this->container['site_seo'] = $site_seo;

        return $this;
    }

    /**
     * Gets schemas
     *
     * @return \OpenAPI\Client\Model\SiteSchemas|null
     */
    public function getSchemas()
    {
        return $this->container['schemas'];
    }

    /**
     * Sets schemas
     *
     * @param \OpenAPI\Client\Model\SiteSchemas|null $schemas schemas
     *
     * @return self
     */
    public function setSchemas($schemas)
    {
        if (is_null($schemas)) {
            throw new \InvalidArgumentException('non-nullable schemas cannot be null');
        }
        $this->container['schemas'] = $schemas;

        return $this;
    }

    /**
     * Gets site_default_domain
     *
     * @return string|null
     */
    public function getSiteDefaultDomain()
    {
        return $this->container['site_default_domain'];
    }

    /**
     * Sets site_default_domain
     *
     * @param string|null $site_default_domain site_default_domain
     *
     * @return self
     */
    public function setSiteDefaultDomain($site_default_domain)
    {
        if (is_null($site_default_domain)) {
            throw new \InvalidArgumentException('non-nullable site_default_domain cannot be null');
        }
        $this->container['site_default_domain'] = $site_default_domain;

        return $this;
    }

    /**
     * Gets preview_site_url
     *
     * @return string|null
     */
    public function getPreviewSiteUrl()
    {
        return $this->container['preview_site_url'];
    }

    /**
     * Sets preview_site_url
     *
     * @param string|null $preview_site_url preview_site_url
     *
     * @return self
     */
    public function setPreviewSiteUrl($preview_site_url)
    {
        if (is_null($preview_site_url)) {
            throw new \InvalidArgumentException('non-nullable preview_site_url cannot be null');
        }
        $this->container['preview_site_url'] = $preview_site_url;

        return $this;
    }

    /**
     * Gets last_published_date
     *
     * @return string|null
     */
    public function getLastPublishedDate()
    {
        return $this->container['last_published_date'];
    }

    /**
     * Sets last_published_date
     *
     * @param string|null $last_published_date last_published_date
     *
     * @return self
     */
    public function setLastPublishedDate($last_published_date)
    {
        if (is_null($last_published_date)) {
            throw new \InvalidArgumentException('non-nullable last_published_date cannot be null');
        }
        $this->container['last_published_date'] = $last_published_date;

        return $this;
    }

    /**
     * Gets first_published_date
     *
     * @return string|null
     */
    public function getFirstPublishedDate()
    {
        return $this->container['first_published_date'];
    }

    /**
     * Sets first_published_date
     *
     * @param string|null $first_published_date first_published_date
     *
     * @return self
     */
    public function setFirstPublishedDate($first_published_date)
    {
        if (is_null($first_published_date)) {
            throw new \InvalidArgumentException('non-nullable first_published_date cannot be null');
        }
        $this->container['first_published_date'] = $first_published_date;

        return $this;
    }

    /**
     * Gets force_https
     *
     * @return string|null
     */
    public function getForceHttps()
    {
        return $this->container['force_https'];
    }

    /**
     * Sets force_https
     *
     * @param string|null $force_https force_https
     *
     * @return self
     */
    public function setForceHttps($force_https)
    {
        if (is_null($force_https)) {
            throw new \InvalidArgumentException('non-nullable force_https cannot be null');
        }
        $this->container['force_https'] = $force_https;

        return $this;
    }

    /**
     * Gets last_reset_by
     *
     * @return string|null
     */
    public function getLastResetBy()
    {
        return $this->container['last_reset_by'];
    }

    /**
     * Sets last_reset_by
     *
     * @param string|null $last_reset_by last_reset_by
     *
     * @return self
     */
    public function setLastResetBy($last_reset_by)
    {
        if (is_null($last_reset_by)) {
            throw new \InvalidArgumentException('non-nullable last_reset_by cannot be null');
        }
        $this->container['last_reset_by'] = $last_reset_by;

        return $this;
    }

    /**
     * Gets certificate_status
     *
     * @return string|null
     */
    public function getCertificateStatus()
    {
        return $this->container['certificate_status'];
    }

    /**
     * Sets certificate_status
     *
     * @param string|null $certificate_status certificate_status
     *
     * @return self
     */
    public function setCertificateStatus($certificate_status)
    {
        if (is_null($certificate_status)) {
            throw new \InvalidArgumentException('non-nullable certificate_status cannot be null');
        }
        $this->container['certificate_status'] = $certificate_status;

        return $this;
    }

    /**
     * Gets modification_date
     *
     * @return string|null
     */
    public function getModificationDate()
    {
        return $this->container['modification_date'];
    }

    /**
     * Sets modification_date
     *
     * @param string|null $modification_date modification_date
     *
     * @return self
     */
    public function setModificationDate($modification_date)
    {
        if (is_null($modification_date)) {
            throw new \InvalidArgumentException('non-nullable modification_date cannot be null');
        }
        $this->container['modification_date'] = $modification_date;

        return $this;
    }

    /**
     * Gets creation_date
     *
     * @return string|null
     */
    public function getCreationDate()
    {
        return $this->container['creation_date'];
    }

    /**
     * Sets creation_date
     *
     * @param string|null $creation_date creation_date
     *
     * @return self
     */
    public function setCreationDate($creation_date)
    {
        if (is_null($creation_date)) {
            throw new \InvalidArgumentException('non-nullable creation_date cannot be null');
        }
        $this->container['creation_date'] = $creation_date;

        return $this;
    }

    /**
     * Gets publish_status
     *
     * @return string|null
     */
    public function getPublishStatus()
    {
        return $this->container['publish_status'];
    }

    /**
     * Sets publish_status
     *
     * @param string|null $publish_status publish_status
     *
     * @return self
     */
    public function setPublishStatus($publish_status)
    {
        if (is_null($publish_status)) {
            throw new \InvalidArgumentException('non-nullable publish_status cannot be null');
        }
        $this->container['publish_status'] = $publish_status;

        return $this;
    }

    /**
     * Gets thumbnail_url
     *
     * @return string|null
     */
    public function getThumbnailUrl()
    {
        return $this->container['thumbnail_url'];
    }

    /**
     * Sets thumbnail_url
     *
     * @param string|null $thumbnail_url thumbnail_url
     *
     * @return self
     */
    public function setThumbnailUrl($thumbnail_url)
    {
        if (is_null($thumbnail_url)) {
            throw new \InvalidArgumentException('non-nullable thumbnail_url cannot be null');
        }
        $this->container['thumbnail_url'] = $thumbnail_url;

        return $this;
    }

    /**
     * Gets store_status
     *
     * @return string|null
     */
    public function getStoreStatus()
    {
        return $this->container['store_status'];
    }

    /**
     * Sets store_status
     *
     * @param string|null $store_status store_status
     *
     * @return self
     */
    public function setStoreStatus($store_status)
    {
        if (is_null($store_status)) {
            throw new \InvalidArgumentException('non-nullable store_status cannot be null');
        }
        $this->container['store_status'] = $store_status;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


